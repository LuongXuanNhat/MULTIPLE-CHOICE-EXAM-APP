<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Z.Dapper.Plus</name>
    </assembly>
    <members>
        <member name="T:Z.Dapper.Plus.BaseDapperPlusActionSet">
            <summary>A base dapper plus action set.</summary>
        </member>
        <member name="F:Z.Dapper.Plus.BaseDapperPlusActionSet.Actions">
            <summary>The actions.</summary>
        </member>
        <member name="P:Z.Dapper.Plus.BaseDapperPlusActionSet.Connection">
            <summary>Gets or sets the connection.</summary>
            <value>The connection.</value>
        </member>
        <member name="P:Z.Dapper.Plus.BaseDapperPlusActionSet.Transaction">
            <summary>Gets or sets the transaction.</summary>
            <value>The transaction.</value>
        </member>
        <member name="P:Z.Dapper.Plus.BaseDapperPlusActionSet.Context">
            <summary>Gets or sets the context.</summary>
            <value>The context.</value>
        </member>
        <member name="P:Z.Dapper.Plus.BaseDapperPlusActionSet.BulkOptionsBuilder">
            <summary>Gets or sets the options to applies.</summary>
            <value>The options to applies.</value>
        </member>
        <member name="T:Z.Dapper.Plus.CreateTableType">
            <summary>Values that represent the type of table to create.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.DropTable(System.Data.IDbConnection,System.String)">
            <summary>An IDbConnection extension method that DROP a table in the database.</summary>
            <param name="connection">The connection to act on.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.CreateTable``1(System.Data.IDbTransaction,System.String)">
            <summary>An IDbTransaction extension method that creates a table.</summary>
            <param name="transaction">The transaction to act on.</param>
            <param name="tableName">Name of the table.</param>
            <returns>The new table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.CreateTable``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>An IDbTransaction extension method that creates a table.</summary>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">The items.</param>
            <param name="tableName">Name of the table.</param>
            <returns>The new table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.CreateTable``1(System.Data.IDbTransaction,Z.Dapper.Plus.CreateTableType)">
            <summary>An IDbTransaction extension method that creates a table.</summary>
            <param name="transaction">The transaction to act on.</param>
            <param name="createTableType">Type of the create table.</param>
            <returns>The new table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.CreateTable``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0},Z.Dapper.Plus.CreateTableType)">
            <summary>An IDbTransaction extension method that creates a table.</summary>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">The items.</param>
            <param name="createTableType">Type of the create table.</param>
            <returns>The new table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.DropTable(System.Data.IDbTransaction,System.String)">
            <summary>An IDbTransaction extension method that DROP a table in the database.</summary>
            <param name="transaction">The transaction to act on.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkDelete``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,System.Object}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkDelete``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,System.Object}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkDelete``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Object}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkDelete``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,System.Object}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkInsert``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,System.Object}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkInsert``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,System.Object}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkInsert``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Object}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkInsert``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,System.Object}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkMerge``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkMerge``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkMerge``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkMerge``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkSynchronize``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkSynchronize``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkSynchronize``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkSynchronize``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkUpdate``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkUpdate``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkUpdate``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.AlsoBulkUpdate``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkDelete``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,``1}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkDelete``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,``1}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkDelete``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkDelete``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,``1}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkInsert``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,``1}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkInsert``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,``1}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkInsert``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkInsert``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,``1}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkMerge``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,``1}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkMerge``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,``1}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkMerge``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkMerge``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,``1}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkSynchronize``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,``1}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkSynchronize``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,``1}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkSynchronize``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkSynchronize``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,``1}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkUpdate``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Func{``0,``1}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkUpdate``2(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.String,System.Func{``0,``1}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkUpdate``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenBulkUpdate``2(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.String,System.Func{``0,``1}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>An IDapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenForEach``1(Z.Dapper.Plus.IDapperPlusActionSet{``0},System.Action{``0})">
            <summary>
            An IDapperPlusActionSet&lt;IEnumerable&lt;TEntity&gt;&gt; extension method that perform an
            action for each entity.
            </summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="forEachAction">The ForEach action.</param>
            <returns>An IDapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.ThenForEach``1(Z.Dapper.Plus.IDapperPlusActionSet{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            An IDapperPlusActionSet&lt;IEnumerable&lt;TEntity&gt;&gt; extension method that perform an
            action for each entity.
            </summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <param name="actionSet">The actionSet to act on.</param>
            <param name="forEachAction">The ForEach action.</param>
            <returns>An IDapperPlusActionSet&lt;IEnumerable&lt;TEntity&gt;&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkActionAsync(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.Action{Z.Dapper.Plus.DapperPlusActionSet{System.Object}},System.Threading.CancellationToken)">
            <summary>An IDbConnection extension method that bulk action asynchronous.</summary>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="asyncAction">The asynchronous action.</param>
            <param name="cancellationToken">(Optional) The cancellation token.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkActionAsync(System.Data.IDbConnection,System.Action{Z.Dapper.Plus.DapperPlusActionSet{System.Object}},System.Threading.CancellationToken)">
            <summary>An IDbConnection extension method that bulk action asynchronous.</summary>
            <param name="connection">The connection to act on.</param>
            <param name="asyncAction">The asynchronous action.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,``0[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,System.String,``0[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,``0[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,System.String,``0[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,``0[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,System.String,``0[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,``0[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,System.String,``0[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,``0[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,System.String,``0[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="connection">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.CreateTable``1(System.Data.IDbConnection,System.String)">
            <summary>An IDbConnection extension method that creates a table.</summary>
            <param name="connection">The connection to act on.</param>
            <param name="tableName">Name of the table.</param>
            <returns>The new table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.CreateTable``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>An IDbConnection extension method that creates a table.</summary>
            <param name="connection">The connection to act on.</param>
            <param name="items">The items.</param>
            <param name="tableName">Name of the table.</param>
            <returns>The new table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.CreateTable``1(System.Data.IDbConnection,Z.Dapper.Plus.CreateTableType)">
            <summary>An IDbConnection extension method that creates a table.</summary>
            <param name="connection">The connection to act on.</param>
            <param name="createTableType">Type of the create table.</param>
            <returns>The new table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.CreateTable``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},Z.Dapper.Plus.CreateTableType)">
            <summary>An IDbConnection extension method that creates a table.</summary>
            <param name="connection">The connection to act on.</param>
            <param name="items">The items.</param>
            <param name="createTableType">Type of the create table.</param>
            <returns>The new table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkActionAsync(System.Data.IDbTransaction,System.Action{Z.Dapper.Plus.DapperPlusActionSet{System.Object}},System.Threading.CancellationToken)">
            <summary>An IDbConnection extension method that bulk action asynchronous.</summary>
            <param name="transaction">The connection to act on.</param>
            <param name="asyncAction">The asynchronous action.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,``0[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,System.String,``0[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,``0[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,System.String,``0[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,``0[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,System.String,``0[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,``0[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,System.String,``0[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,``0[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,System.String,``0[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkActionAsync(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.Action{Z.Dapper.Plus.DapperPlusActionSet{System.Object}},System.Threading.CancellationToken)">
            <summary>An IDbConnection extension method that bulk action asynchronous.</summary>
            <param name="transaction">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="asyncAction">The asynchronous action.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkDelete``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The connection to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkInsert``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkMerge``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkSynchronize``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExtensions.BulkUpdate``1(System.Data.IDbTransaction,Z.Dapper.Plus.DapperPlusContext,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
            An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction to act on.</param>
            <param name="context">The DapperPlusContext.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="T:Z.Dapper.Plus.DapperPlusActionKind">
            <summary>Values that represent action available in the Dapper Plus library.</summary>
        </member>
        <member name="F:Z.Dapper.Plus.DapperPlusActionKind.Insert">
            <summary>An enum constant representing the insert option.</summary>
        </member>
        <member name="F:Z.Dapper.Plus.DapperPlusActionKind.Update">
            <summary>An enum constant representing the update option.</summary>
        </member>
        <member name="F:Z.Dapper.Plus.DapperPlusActionKind.Delete">
            <summary>An enum constant representing the delete option.</summary>
        </member>
        <member name="F:Z.Dapper.Plus.DapperPlusActionKind.Merge">
            <summary>An enum constant representing the merge option.</summary>
        </member>
        <member name="F:Z.Dapper.Plus.DapperPlusActionKind.Synchronize">
            <summary>An enum constant representing the merge option.</summary>
        </member>
        <member name="F:Z.Dapper.Plus.DapperPlusActionKind.ForEach">
            <summary>An enum constant representing the ForEach option.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AddAction``1(System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Func{``0,System.Object}[])">
            <summary>Adds an action to the actionSet.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="selectors">The selection of entities to perform the action kind on.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AddAction(System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Func{`0,System.Object}[])">
            <summary>Adds an action to the actionSet.</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="selectors">The selection of entities to perform the action kind on.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AddAction(System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds an action to the actionSet.</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="item">The item to perform the action kind on.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AddAction(System.String,Z.Dapper.Plus.DapperPlusActionKind,`0)">
            <summary>Adds an action to the actionSet.</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="item">The item to perform the action kind on.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AddAction(System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Adds an action to the actionSet.</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="childs">The childs to perform the action kind on.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkDelete(System.Func{`0,System.Object}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression</summary>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkDelete(System.String,System.Func{`0,System.Object}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression.</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkInsert(System.Func{`0,System.Object}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression</summary>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkInsert(System.String,System.Func{`0,System.Object}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression.</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkMerge(System.Func{`0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkMerge(System.String,System.Func{`0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkSynchronize(System.Func{`0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression</summary>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkSynchronize(System.String,System.Func{`0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression.</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkUpdate(System.Func{`0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression</summary>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.AlsoBulkUpdate(System.String,System.Func{`0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression.</summary>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkActionAsync(System.Action{Z.Dapper.Plus.DapperPlusActionSet{`0}},System.Threading.CancellationToken)">
            <summary>Execute bulk action asynchronous.</summary>
            <param name="asyncAction">The asynchronous action.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkDelete``1(``0[])">
            <summary>DELETE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to delete</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkDelete``1(``0,System.Func{``0,System.Object}[])">
            <summary>DELETE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkDelete``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>DELETE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkDelete``1(System.String,``0[])">
            <summary>DELETE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkDelete``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>DELETE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkDelete``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>DELETE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkInsert``1(``0[])">
            <summary>INSERT entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to insert</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkInsert``1(``0,System.Func{``0,System.Object}[])">
            <summary>INSERT entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkInsert``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>INSERT entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkInsert``1(System.String,``0[])">
            <summary>INSERT entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkInsert``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>INSERT entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkInsert``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>INSERT entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkMerge``1(``0[])">
            <summary>MERGE (Upsert) entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to merge</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkMerge``1(``0,System.Func{``0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkMerge``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkMerge``1(System.String,``0[])">
            <summary>MERGE (Upsert) entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkMerge``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkMerge``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>MERGE (Upsert) entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkSynchronize``1(``0[])">
            <summary>SYNCHRONIZE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to synchronize</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkSynchronize``1(``0,System.Func{``0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkSynchronize``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkSynchronize``1(System.String,``0[])">
            <summary>SYNCHRONIZE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkSynchronize``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkSynchronize``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>SYNCHRONIZE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkUpdate``1(``0[])">
            <summary>UPDATE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to update</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkUpdate``1(``0,System.Func{``0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkUpdate``1(System.String,``0[])">
            <summary>UPDATE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkUpdate``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.BulkUpdate``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>UPDATE entities in a database table or a view.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.String,Z.Dapper.Plus.DapperPlusActionKind,`0,System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="item">The item.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.Action{Z.BulkOperations.BulkOperation})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="bulkOptionsBuilder">The bulk options builder.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Threading.CancellationToken)">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.String,Z.Dapper.Plus.DapperPlusActionKind,`0,System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="item">The item.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Action{Z.BulkOperations.BulkOperation})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="bulkOptionsBuilder">The bulk options builder.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="transaction">The transaction.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbTransaction,System.Action{Z.BulkOperations.BulkOperation})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="transaction">The transaction.</param>
            <param name="bulkOptionsBuilder">The bulk options builder.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbTransaction,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="transaction">The transaction.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbTransaction,System.String,Z.Dapper.Plus.DapperPlusActionKind,`0,System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="transaction">The transaction.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="item">The item.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbTransaction,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="transaction">The transaction.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.DapperPlusActionSetBuilder(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.DapperPlusActionSetBuilder(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.Data.IDbTransaction,System.Action{Z.BulkOperations.BulkOperation})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="bulkOptionsBuilder">The cancellation token.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.DapperPlusActionSetBuilder(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.DapperPlusActionSetBuilder(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,Z.Dapper.Plus.DapperPlusActionKind,`0,System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="item">The item.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.DapperPlusActionSetBuilder(Z.Dapper.Plus.DapperPlusContext,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.BaseDapperPlusActionSet)">
            <summary>Constructor.</summary>
            <param name="oldActionSet">Set the old action belongs to.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.BaseDapperPlusActionSet,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructor.</summary>
            <param name="oldActionSet">Set the old action belongs to.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.BaseDapperPlusActionSet,System.String,Z.Dapper.Plus.DapperPlusActionKind,`0,System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="oldActionSet">Set the old action belongs to.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="item">The item.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.#ctor(Z.Dapper.Plus.BaseDapperPlusActionSet,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Object}[])">
            <summary>Constructor.</summary>
            <param name="oldActionSet">Set the old action belongs to.</param>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="items">The items.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusActionSet`1.CancellationToken">
            <summary>Gets or sets the cancellation token.</summary>
            <value>The cancellation token.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusActionSet`1.Current">
            <summary>Gets or sets the current.</summary>
            <value>The current.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusActionSet`1.CurrentItem">
            <summary>Gets or sets the current item.</summary>
            <value>The current item.</value>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.CreateDapperAction``2(System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Func{``0,``1}[])">
            <summary>Creates dapper action.</summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
            <returns>The new dapper action.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.CreateDapperAction``1(System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Func{`0,``0}[])">
            <summary>Creates dapper action.</summary>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="selectors">A variable-length parameters list containing selectors.</param>
            <returns>The new dapper action.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ImportConfiguration(Z.Dapper.Plus.BaseDapperPlusActionSet)">
            <summary>Import configuration.</summary>
            <param name="oldActionSet">The action set to import configuration from.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.Include(System.Action{Z.Dapper.Plus.DapperPlusActionSet{`0}})">
            <summary>Includes the given action.</summary>
            <param name="includeAction">The action to include.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkDelete``1(System.Func{`0,``0}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkDelete``1(System.String,System.Func{`0,``0}[])">
            <summary>DELETE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkInsert``1(System.Func{`0,``0}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkInsert``1(System.String,System.Func{`0,``0}[])">
            <summary>INSERT entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkMerge``1(System.Func{`0,``0}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkMerge``1(System.String,System.Func{`0,``0}[])">
            <summary>MERGE (Upsert) entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkSynchronize``1(System.Func{`0,``0}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkSynchronize``1(System.String,System.Func{`0,``0}[])">
            <summary>SYNCHRONIZE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkUpdate``1(System.Func{`0,``0}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenBulkUpdate``1(System.String,System.Func{`0,``0}[])">
            <summary>UPDATE entities in a database table or a view using a lambda expression.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusActionSet`1.ThenForEach(System.Action{`0})">
            <summary>Perform an action for each entity.</summary>
            <param name="forEachAction">The ForEach Action.</param>
            <returns>A DapperPlusActionSet&lt;TEntity&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusAction.#ctor(Z.Dapper.Plus.BaseDapperPlusActionSet,System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Object)">
            <summary>Constructor.</summary>
            <param name="action">The action.</param>
            <param name="key">The key.</param>
            <param name="kind">The kind.</param>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusAction.#ctor(Z.Dapper.Plus.DapperPlusActionKind,System.Action)">
            <summary>Constructor.</summary>
            <param name="kind">The kind.</param>
            <param name="forEachAction">for each action.</param>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusAction.ForEachAction">
            <summary>Gets or sets for each action.</summary>
            <value>for each action.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusAction.Key">
            <summary>Gets or sets the key.</summary>
            <value>The key.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusAction.Kind">
            <summary>Gets or sets the kind.</summary>
            <value>The kind.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusAction.Connection">
            <summary>Gets or sets the connection.</summary>
            <value>The connection.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusAction.Transaction">
            <summary>Gets or sets the transaction.</summary>
            <value>The transaction.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusAction.Config">
            <summary>Gets or sets the configuration.</summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusAction.DataSource">
            <summary>Gets or sets the data source.</summary>
            <value>The data source.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusAction.IsExecuted">
            <summary>Gets or sets a value indicating whether this object is executed.</summary>
            <value>true if this object is executed, false if not.</value>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusAction.ApplyConfig(Z.BulkOperations.BulkOperation,Z.Dapper.Plus.DapperPlusEntityMapper,Z.Dapper.Plus.DapperPlusActionKind)">
            <summary>Applies the configuration.</summary>
            <param name="bulkOperation">The bulk operation.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusAction.AutoMap(Z.BulkOperations.BulkOperation,Z.Dapper.Plus.DapperPlusEntityMapper)">
            <summary>Automatic map.</summary>
            <param name="entityMapper">The entity mapper.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusAction.IdentityPropagation(Z.BulkOperations.BulkOperation,Z.Dapper.Plus.DapperPlusEntityMapper)">
            <summary>Executes this object.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusAction.Execute">
            <summary>Executes this object.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusAction.Map(Z.BulkOperations.BulkOperation,Z.Dapper.Plus.DapperPlusEntityMapper)">
            <summary>Maps.</summary>
            <param name="bulkOperation">The bulk operation.</param>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:Z.Dapper.Plus.DapperPlusColumnMapping">
            <summary>A dapper plus column mapping.</summary>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.SourceName">
            <summary>Gets or sets the column source name.</summary>
            <value>The column source name.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.SourceValue">
            <summary>Gets or sets source value.</summary>
            <value>The source value.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.SourceValueFactory">
            <summary>Gets or sets source value factory.</summary>
            <value>The source value factory.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.DestinationName">
            <summary>Gets or sets the column destination name.</summary>
            <value>The column destination name.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.IsPrimaryKey">
            <summary>Gets or sets a value indicating whether this column is primary key.</summary>
            <value>true if this column is primary key, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.IsIdentity">
            <summary>Gets or sets a value indicating whether this column is identity.</summary>
            <value>true if this column is identity, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.IsOptional">
            <summary>Gets or sets a value indicating whether this object is optional.</summary>
            <value>True if this object is optional, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.Input">
            <summary>Gets or sets a value indicating whether this column use the direction input.</summary>
            <value>true if the column use the direction input, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.Output">
            <summary>Gets or sets a value indicating whether this column use the direction output.</summary>
            <value>true if the column use the direction output, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.IgnoreOnMergeInsert">
            <summary>Gets or sets a value indicating whether this column is ignored when merge inserting.</summary>
            <value>true if the column is ignored when merge inserting, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.IgnoreOnMergeUpdate">
            <summary>Gets or sets a value indicating whether this column is ignored when merge updating.</summary>
            <value>true if the column is ignored when merge updating, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.CoalesceOnMergeUpdate">
            <summary>Gets or sets a value indicating whether this column use coalesce merge inserting.</summary>
            <value>true if the column use coalesce when merge inserting, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.CoalesceDestinationOnMergeUpdate">
            <summary>Gets or sets a value indicating whether this column use a coalesce with destination when merge updating.</summary>
            <value>true if the column use a coalesce with destination when merge updating, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.AuditMode">
            <summary>Gets or sets the audit mode.</summary>
            <value>The audit mode.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.DefaultValueResolution">
            <summary>Gets or sets the default value resolution.</summary>
            <value>The default value resolution.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusColumnMapping.DefaultValueSql">
            <summary>Gets or sets the default value SQL.</summary>
            <value>The default value SQL.</value>
        </member>
        <member name="T:Z.Dapper.Plus.DapperPlusContext">
            <summary>Manager for dapper plus.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkActionAsync(System.Action{Z.Dapper.Plus.DapperPlusActionSet{System.Object}},System.Threading.CancellationToken)">
            <summary>An IDbConnection extension method that bulk action asynchronous.</summary>
            <param name="asyncAction">The asynchronous action.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkDelete``1(``0[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkDelete``1(``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkDelete``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkDelete``1(System.String,``0[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkDelete``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkDelete``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to DELETE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to delete.</param>
            <param name="selectors">The selection of entities to delete.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkInsert``1(``0[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkInsert``1(``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkInsert``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkInsert``1(System.String,``0[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkInsert``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkInsert``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to INSERT entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to insert.</param>
            <param name="selectors">The selection of entities to insert.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkMerge``1(``0[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkMerge``1(``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkMerge``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkMerge``1(System.String,``0[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkMerge``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkMerge``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to MERGE (Upsert) entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to merge.</param>
            <param name="selectors">The selection of entities to merge.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkSynchronize``1(``0[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkSynchronize``1(``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkSynchronize``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkSynchronize``1(System.String,``0[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkSynchronize``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkSynchronize``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to SYNCHRONIZE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to synchronize.</param>
            <param name="selectors">The selection of entities to synchronize.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkUpdate``1(``0[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkUpdate``1(``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkUpdate``1(System.String,``0[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkUpdate``1(System.String,``0,System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="item">The item to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.BulkUpdate``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object}[])">
            <summary>
                An IDbConnection extension method to UPDATE entities in a database table or a view.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="items">items to update.</param>
            <param name="selectors">The selection of entities to update.</param>
            <returns>A DapperPlusActionSet&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.UseBulkOptions(System.Action{Z.BulkOperations.BulkOperation})">
            <summary>Use bulk options.</summary>
            <param name="bulkOptionsBuilder">The bulk options builder.</param>
            <returns>A DapperPlusActionSet&lt;object&gt;</returns>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusContext.Connection">
            <summary>Gets or sets the connection.</summary>
            <value>The connection.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusContext.Transaction">
            <summary>Gets or sets the transaction.</summary>
            <value>The transaction.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusContext.IsMapperLocked">
            <summary>Static constructor.</summary>
            <summary>Gets or sets a value indicating whether this object is mapper locked. When locked, anything that could affect the mapping will start to throw a "locked" error.</summary>
            <value>True if this object is mapper locked, false if not. When locked, anything that could affect the mapping will start to throw a "locked" error.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusContext.MapperCache">
            <summary>Gets or sets the mapper cache.</summary>
            <value>The mapper cache.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusContext.MapperFactory">
            <summary>Gets or sets the mapper factory.</summary>
            <value>The mapper factory.</value>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.Entity``1(System.String)">
            <summary>Get or create a new mapper for the specified type and mapper key.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <returns>A DapperPlusConfig&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.Entity(System.Type,System.String)">
            <summary>Get or create a new mapper for the specified type and mapper key.</summary>
            <param name="type">The type.</param>
            <param name="mapperKey">The mapper key.</param>
            <returns>A DapperPlusConfig</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.RemoveEntity``1(System.String)">
            <summary>Removes the mapper for the specified type and mapper key.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.IsMappedEntity``1(System.String)">
            <summary>Check if a mapping exists for the specified type and mapper key.</summary>
            <param name="mapperKey">The mapper key.</param>
            <returns>True if a mapping exists for the specified type and mapper key.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusContext.IsMapped">
            <summary>Check if at least one mapping has been added.</summary>
            <returns>True if at least one mapping has been added.</returns>
        </member>
        <member name="T:Z.Dapper.Plus.DapperPlusEntityMapper">
            <summary>A dapper plus entity mapper.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.#ctor(Z.Dapper.Plus.DapperPlusContext)">
            <summary>Default constructor.</summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsUseBulkOptionsModified">
            <summary>Gets the value indicating if UseBulkOptions configuration is modified.</summary>
            <returns>The value indicating if UseBulkOptions configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsUseBulkOptionsModified(System.Boolean)">
            <summary>Gets the value indicating if UseBulkOptions configuration is modified.</summary>
            <param name="value">true if UseBulkOptions is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.DefaultValueResolution">
            <summary>Gets the default value resolution.</summary>
            <returns>The default value resolution.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsDefaultValueResolutionModified">
            <summary>Gets the value indicating if default value resolution configuration is modified.</summary>
            <returns>The value indicating if default value resolution configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsDefaultValueResolutionModified(System.Boolean)">
            <summary>Gets the value indicating if default value resolution configuration is modified.</summary>
            <param name="value">true if the default value resolution is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsDefaultValueSqlModified">
            <summary>Gets the value indicating if default value sql configuration is modified.</summary>
            <returns>The value indicating if default value sql configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsDefaultValueSqlModified(System.Boolean)">
            <summary>Gets the value indicating if default value sql configuration is modified.</summary>
            <param name="value">true if the default value sql is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.AuditMode">
            <summary>Gets the audit mode.</summary>
            <returns>The audit mode.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsAuditModeModified">
            <summary>Gets the value indicating if audit mode configuration is modified.</summary>
            <returns>The value indicating if audit mode configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsAuditModeModified(System.Boolean)">
            <summary>Gets the value indicating if AuditMode configuration is modified.</summary>
            <param name="value">true if the AuditMode is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.BatchDelayInterval">
            <summary>Gets the batch delay interval.</summary>
            <returns>The batch delay interval</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.BatchSize">
            <summary>Gets the batch size.</summary>
            <summary>The batch size.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.BatchTimeout">
            <summary>Gets the batch timeout.</summary>
            <summary>The batch timeout.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.BatchDelayInterval(System.Int32)">
            <summary>Sets the batch delay interval.</summary>
            <param name="batchDelayInterval">The batch delay interval.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.BatchSize(System.Int32)">
            <summary>Sets the batch size.</summary>
            <param name="batchSize">The batch size.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.BatchTimeout(System.Int32)">
            <summary>Sets the batch timeout.</summary>
            <param name="batchTimeout">The batch timeout.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Table">
            <summary>Gets the destination table name.</summary>
            <returns>The destination table name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Table(System.String)">
            <summary>Sets the destination table name.</summary>
            <param name="name">The destination table name.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.GetTable">
            <summary>Gets the destination table name.</summary>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsAutoMapModified">
            <summary>Gets the value indicating if automap configuration is modified.</summary>
            <returns>The value indicating if automap configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsIdentityModified">
            <summary>Gets the value indicating if identity configuration is modified.</summary>
            <returns>The value indicating if identity configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsIgnoreModified">
            <summary>Gets the value indicating if ignore configuration is modified.</summary>
            <returns>The value indicating if ignore configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsKeyModified">
            <summary>Gets the value indicating if key configuration is modified.</summary>
            <returns>The value indicating if key configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsMapModified">
            <summary>Gets the value indicating if map configuration is modified.</summary>
            <returns>The value indicating if map configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsForeignKeyModified">
            <summary>Gets the value indicating if foreign key configuration is modified.</summary>
            <returns>The value indicating if foreign key configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsOutputModified">
            <summary>Gets the value indicating if output configuration is modified.</summary>
            <returns>The value indicating if output configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsIgnoreOnMergeInsertModified">
            <summary>Gets the value indicating if IgnoreOnMergeInsert configuration is modified.</summary>
            <returns>The value indicating if IgnoreOnMergeInsert configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsIgnoreOnMergeUpdateModified">
            <summary>Gets the value indicating if IgnoreOnMergeUpdate configuration is modified.</summary>
            <returns>The value indicating if IgnoreOnMergeUpdate configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsCoalesceOnMergeUpdateModified">
            <summary>Gets the value indicating if CoalesceOnMergeUpdate configuration is modified.</summary>
            <returns>The value indicating if CoalesceOnMergeUpdate configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsCoalesceDestinationOnMergeUpdateModified">
            <summary>Gets the value indicating if CoalesceDestinationOnMergeUpdate configuration is modified.</summary>
            <returns>The value indicating if CoalesceDestinationOnMergeUpdate configuration is modified.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsAutoMapModified(System.Boolean)">
            <summary>Gets the value indicating if automap configuration is modified.</summary>
            <param name="value">true if the automap is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsIdentityModified(System.Boolean)">
            <summary>Gets the value indicating if identity configuration is modified.</summary>
            <param name="value">true if the identity is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsIgnoreModified(System.Boolean)">
            <summary>Sets the value indicating if ignore configuration is modified.</summary>
            <param name="value">true if the ignore is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsKeyModified(System.Boolean)">
            <summary>Sets the value indicating if key configuration is modified.</summary>
            <param name="value">true if the key is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsForeignKeyModified(System.Boolean)">
            <summary>Sets the value indicating if foreign key configuration is modified.</summary>
            <param name="value">true if the foreign key is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsMapModified(System.Boolean)">
            <summary>Sets the value indicating if map configuration is modified.</summary>
            <param name="value">true if the map is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsOutputModified(System.Boolean)">
            <summary>Sets the value indicating if output configuration is modified.</summary>
            <param name="value">true if the output is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsIgnoreOnMergeInsertModified(System.Boolean)">
            <summary>Sets the value indicating if IgnoreOnMergeInsert configuration is modified.</summary>
            <param name="value">true if the IgnoreOnMergeInsert is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsIgnoreOnMergeUpdateModified(System.Boolean)">
            <summary>Sets the value indicating if IgnoreOnMergeUpdate configuration is modified.</summary>
            <param name="value">true if the IgnoreOnMergeUpdate is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsCoalesceOnMergeUpdateModified(System.Boolean)">
            <summary>Sets the value indicating if CoalesceOnMergeUpdate configuration is modified.</summary>
            <param name="value">true if the CoalesceOnMergeUpdate is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IsCoalesceDestinationOnMergeUpdateModified(System.Boolean)">
            <summary>Sets the value indicating if CoalesceDestinationOnMergeUpdate configuration is modified.</summary>
            <param name="value">true if the CoalesceDestinationOnMergeUpdate is modified.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Identity(System.String)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Identity(System.String,System.String)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Identity(System.String,System.Boolean)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <param name="autoPropagateIdentity">True if you want to propagate the identity automatically.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Identity(System.String,System.String,System.Boolean)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <param name="autoPropagateIdentity">True if you want to propagate the identity automatically.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Ignore(System.String)">
            <summary>Sets ignore accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Ignore(System.String,System.String)">
            <summary>Sets ignore accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IgnoreOnMergeInsert(System.String)">
            <summary>Sets IgnoreOnMergeInsert accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IgnoreOnMergeInsert(System.String,System.String)">
            <summary>Sets IgnoreOnMergeInsert accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IgnoreOnMergeUpdate(System.String)">
            <summary>Sets IgnoreOnMergeUpdate accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.IgnoreOnMergeUpdate(System.String,System.String)">
            <summary>Sets IgnoreOnMergeUpdate accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.CoalesceOnMergeUpdate(System.String)">
            <summary>Sets CoalesceOnMergeUpdate accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.CoalesceOnMergeUpdate(System.String,System.String)">
            <summary>Sets CoalesceOnMergeUpdate accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.CoalesceDestinationOnMergeUpdate(System.String)">
            <summary>Sets CoalesceDestinationOnMergeUpdate accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.CoalesceDestinationOnMergeUpdate(System.String,System.String)">
            <summary>Sets CoalesceDestinationOnMergeUpdate accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Key(System.String)">
            <summary>Sets key accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Key(System.String,System.String)">
            <summary>Sets key accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Map(System.String)">
            <summary>Sets map accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Map(System.String,System.String)">
            <summary>Sets map accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.MapValue(System.Object,System.String)">
            <summary>Sets a mapping with a constant value.</summary>
            <param name="value">The constant value.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Output(System.String)">
            <summary>Sets output accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.Output(System.String,System.String)">
            <summary>Sets output accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.ForeignKey(System.String,System.String)">
            <summary>Sets foreign key accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.SqlBulkCopyOptions">
            <summary>Gets the Sql bulk copy options.</summary>
            <returns>The Sql bulk copy options.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.SqlBulkCopyOptions(System.Int32)">
            <summary>Sets the Sql bulk copy options.</summary>
            <param name="sqlBulkCopyOptions">The Sql bulk copy options.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.InsertIfNotExists(System.Boolean)">
            <summary>Inserts if not exists described by value.</summary>
            <param name="value">true to value.</param>
            <returns>A DapperPlusEntityMapper.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.KeepIdentity(System.Boolean)">
            <summary>Keep identity.</summary>
            <param name="value">true to keep identity.</param>
            <returns>A DapperPlusEntityMapper.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.TemporaryTableBatchByTable">
            <summary>Gets the temporary table batch by table.</summary>
            <returns>The temporary table batch by table.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.TemporaryTableInsertBatchSize">
            <summary>Gets the temporary table insert batch size.</summary>
            <returns>The temporary table insert batch size.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.TemporaryTableMinRecord">
            <summary>Gets the temporary table minimum record.</summary>
            <returns>The tTemporary table minimum record.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.TemporaryTableSchemaName">
            <summary>Gets the temporary table schema name.</summary>
            <returns>The temporary table schema name.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.TemporaryTableBatchByTable(System.Int32)">
            <summary>Sets the temporary table batch by table.</summary>
            <param name="temporaryTableBatchByTable">The temporary table batch by table.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.TemporaryTableInsertBatchSize(System.Int32)">
            <summary>Sets the temporary table insert batch size.</summary>
            <param name="temporaryTableInsertBatchSize">Size of the temporary table insert batch.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.TemporaryTableMinRecord(System.Int32)">
            <summary>Sets the Temporary table minimum record.</summary>
            <param name="temporaryTableMinRecord">The temporary table minimum record.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.TemporaryTableSchemaName(System.String)">
            <summary>Sets the temporary table schema name.</summary>
            <param name="temporaryTableSchemaName">Name of the temporary table schema.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.RetryCount">
            <summary>Gets the retry count.</summary>
            <returns>The retry count.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.RetryInterval">
            <summary>Gets the retry interval.</summary>
            <returns>The retry interval.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.RetryCount(System.Int32)">
            <summary>Sets the retry count.</summary>
            <param name="retryCount">The retry count.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper.RetryInterval(System.Int32)">
            <summary>Sets the retry interval.</summary>
            <param name="retryInterval">The retry interval.</param>
            <returns>A DapperPlusActionSet.</returns>
        </member>
        <member name="T:Z.Dapper.Plus.DapperPlusEntityMapper`1">
            <summary>A dapper plus entity mapper.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.#ctor(Z.Dapper.Plus.DapperPlusContext)">
            <summary>Default constructor.</summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.#ctor(Z.Dapper.Plus.DapperPlusContext,Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Constructor.</summary>
            <param name="context">The context.</param>
            <param name="master">The master.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.UseBulkOptions(System.Action{Z.BulkOperations.BulkOperation{`0}})">
            <summary>Use bulk options.</summary>
            <param name="bulkOperation">The bulk operation.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.DefaultValueResolution(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Default value resolution column.</summary>
            <param name="copyFromConfiguration">The copy from configuration.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.DefaultValueResolution(Z.BulkOperations.DefaultValueResolutionType)">
            <summary>Default value resolution.</summary>
            <param name="defaultValueResolution">The Default value resolution.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.DefaultValueResolution(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Z.BulkOperations.DefaultValueResolutionType)">
            <summary>Default value resolution mode column.</summary>
            <param name="selectors">The selectors.</param>
            <param name="defaultValueResolution">The default value resolution.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.DefaultValueSql(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Default value sql column.</summary>
            <param name="copyFromConfiguration">The copy from configuration.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.DefaultValueSql(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>Default value resolution sql column.</summary>
            <param name="selectors">The selectors.</param>
            <param name="defaultValueSql">The default value sql.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.AuditMode(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Audit mode column.</summary>
            <param name="copyFromConfiguration">The copy from configuration.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.AuditMode(Z.BulkOperations.AuditModeType)">
            <summary>Audit mode.</summary>
            <param name="auditMode">The audit mode.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.AuditMode(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Z.BulkOperations.ColumnMappingAuditModeType)">
            <summary>Audit mode column.</summary>
            <param name="selectors">The selectors.</param>
            <param name="columnMappingAuditMode">The column mapping audit mode.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.BatchDelayInterval(System.Int32)">
            <summary>Sets the batch delay interval.</summary>
            <param name="batchDelayInterval">The batch delay interval.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.BatchSize(System.Int32)">
            <summary>Sets the batch size.</summary>
            <param name="batchSize">The batch size.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.BatchTimeout(System.Int32)">
            <summary>Sets the batch timeout.</summary>
            <param name="batchTimeout">The batch timeout.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Delete(System.Action{Z.Dapper.Plus.DapperPlusEntityMapper{`0}})">
            <summary>Set the delete configuration with a lambda expression.</summary>
            <param name="actionConfigurationFactory">The action delete configuration factory.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Insert(System.Action{Z.Dapper.Plus.DapperPlusEntityMapper{`0}})">
            <summary>Set the insert configuration with a lambda expression.</summary>
            <param name="actionConfigurationFactory">The action insert configuration factory.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Merge(System.Action{Z.Dapper.Plus.DapperPlusEntityMapper{`0}})">
            <summary>Set the merge configuration with a lambda expression.</summary>
            <param name="actionConfigurationFactory">The action merge configuration factory.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Update(System.Action{Z.Dapper.Plus.DapperPlusEntityMapper{`0}})">
            <summary>Set the update configuration with a lambda expression.</summary>
            <param name="actionConfigurationFactory">The action update configuration factory.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Table(System.String)">
            <summary>Sets the destination table name.</summary>
            <param name="name">The destination table name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.BeforeAction(System.Action{Z.Dapper.Plus.DapperPlusActionKind,`0})">
            <summary>Before action.</summary>
            <param name="action">The action.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.AfterAction(System.Action{Z.Dapper.Plus.DapperPlusActionKind,`0})">
            <summary>After action.</summary>
            <param name="action">The action.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.AutoMap">
            <summary>Sets if automap should be used.</summary>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy identity configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="selectors">The identity selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="selector">The identity selector.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(System.String)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(System.String,System.String)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="selectors">The identity selectors.</param>
            <param name="autoPropagateIdentity">True if you want to propagate the identity automatically.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="selector">The identity selector.</param>
            <param name="destinationName">The destination name.</param>
            <param name="autoPropagateIdentity">True if you want to propagate the identity automatically.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(System.String,System.Boolean)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <param name="autoPropagateIdentity">True if you want to propagate the identity automatically.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Identity(System.String,System.String,System.Boolean)">
            <summary>Sets identity accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <param name="autoPropagateIdentity">True if you want to propagate the identity automatically.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Ignore(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy ignore configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets ignore accessor from the selectors.</summary>
            <param name="selectors">The ignore selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Ignore(System.String)">
            <summary>Sets ignore accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Ignore(System.String,System.String)">
            <summary>Sets ignore accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.IgnoreOnMergeInsert(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy IgnoreOnMergeInsert configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.IgnoreOnMergeInsert(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets IgnoreOnMergeInsert accessor from the selectors.</summary>
            <param name="selectors">The ignore selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.IgnoreOnMergeInsert(System.String)">
            <summary>Sets IgnoreOnMergeInsert accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.IgnoreOnMergeInsert(System.String,System.String)">
            <summary>Sets IgnoreOnMergeInsert accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.IgnoreOnMergeUpdate(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy IgnoreOnMergeUpdate configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.IgnoreOnMergeUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets IgnoreOnMergeUpdate accessor from the selectors.</summary>
            <param name="selectors">The ignore selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.IgnoreOnMergeUpdate(System.String)">
            <summary>Sets IgnoreOnMergeUpdate accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.IgnoreOnMergeUpdate(System.String,System.String)">
            <summary>Sets IgnoreOnMergeUpdate accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.CoalesceOnMergeUpdate(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy CoalesceOnMergeUpdate configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.CoalesceOnMergeUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets CoalesceOnMergeUpdate accessor from the selectors.</summary>
            <param name="selectors">The CoalesceOnMergeUpdate selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.CoalesceOnMergeUpdate(System.String)">
            <summary>Sets CoalesceOnMergeUpdate accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.CoalesceOnMergeUpdate(System.String,System.String)">
            <summary>Sets CoalesceOnMergeUpdate accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.CoalesceDestinationOnMergeUpdate(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy CoalesceDestinationOnMergeUpdate configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.CoalesceDestinationOnMergeUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets CoalesceDestinationOnMergeUpdate accessor from the selectors.</summary>
            <param name="selectors">The CoalesceDestinationOnMergeUpdate selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.CoalesceDestinationOnMergeUpdate(System.String)">
            <summary>Sets CoalesceDestinationOnMergeUpdate accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.CoalesceDestinationOnMergeUpdate(System.String,System.String)">
            <summary>Sets CoalesceDestinationOnMergeUpdate accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Key(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy key configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Key(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets key accessor from the selectors.</summary>
            <param name="selectors">The key selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Key(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>Sets key accessor from the selectors.</summary>
            <param name="selector">The key selector.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Key(System.String)">
            <summary>Sets key accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Key(System.String,System.String)">
            <summary>Sets key accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Map(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy map configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets map accessor from the selectors.</summary>
            <param name="selectors">The map selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>Sets map accessor from the selectors.</summary>
            <param name="selector">The map selector.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Map(System.String)">
            <summary>Sets map accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Map(System.String,System.String)">
            <summary>Sets map accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.MapValue(System.Object,System.String)">
            <summary>Sets a mapping with a constant value.</summary>
            <param name="value">The constant value.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Output(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy output configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Output(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets output accessor from the selectors.</summary>
            <param name="selectors">The output selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Output(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>Sets output accessor from the selectors.</summary>
            <param name="selector">The output selector.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Output(System.String)">
            <summary>Sets output accessor from the selectors.</summary>
            <param name="name">The name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.Output(System.String,System.String)">
            <summary>Sets output accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.ForeignKey(Z.Dapper.Plus.DapperPlusEntityMapper{`0})">
            <summary>Copy foreign key configuration from an existing mapper.</summary>
            <param name="copyFromConfiguration">The configuration to copy from.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.ForeignKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Sets foreign key accessor from the selectors.</summary>
            <param name="selectors">The foreign key selectors.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.ForeignKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>Sets foreign key accessor from the selectors.</summary>
            <param name="selector">The foreign key selector.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.ForeignKey(System.String,System.String)">
            <summary>Sets foreign key accessor from the selectors.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">The destination name.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.SqlBulkCopyOptions(System.Int32)">
            <summary>Sets the Sql bulk copy options.</summary>
            <param name="sqlBulkCopyOptions">The Sql bulk copy options.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.InsertIfNotExists(System.Boolean)">
            <summary>Inserts if not exists described by value.</summary>
            <param name="value">true to value.</param>
            <returns>A DapperPlusEntityMapper.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.KeepIdentity(System.Boolean)">
            <summary>Keep identity.</summary>
            <param name="value">true to keep identity.</param>
            <returns>A DapperPlusEntityMapper.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.TemporaryTableBatchByTable(System.Int32)">
            <summary>Sets the temporary table batch by table.</summary>
            <param name="temporaryTableBatchByTable">The temporary table batch by table.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.TemporaryTableInsertBatchSize(System.Int32)">
            <summary>Sets the temporary table insert batch size.</summary>
            <param name="temporaryTableInsertBatchSize">Size of the temporary table insert batch.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.TemporaryTableMinRecord(System.Int32)">
            <summary>Sets the Temporary table minimum record.</summary>
            <param name="temporaryTableMinRecord">The temporary table minimum record.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.TemporaryTableSchemaName(System.String)">
            <summary>Sets the temporary table schema name.</summary>
            <param name="temporaryTableSchemaName">Name of the temporary table schema.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.RetryCount(System.Int32)">
            <summary>Sets the retry count.</summary>
            <param name="retryCount">The retry count.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusEntityMapper`1.RetryInterval(System.Int32)">
            <summary>Sets the retry interval.</summary>
            <param name="retryInterval">The retry interval.</param>
            <returns>A DapperPlusEntityMapper&lt;T&gt;</returns>
        </member>
        <member name="T:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1">
            <summary>A dapper plus expression mapper.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Z.Dapper.Plus.DestinationType)">
            <summary>Constructor.</summary>
            <param name="selectorFactory">The selector factory.</param>
            <param name="destinationType">(Optional) Type of the destination.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Z.Dapper.Plus.DestinationType)">
            <summary>Constructor.</summary>
            <param name="selectorFactory">The selector factory.</param>
            <param name="destinationName">The destination name.</param>
            <param name="destinationType">(Optional) Type of the destination.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1.#ctor(System.String,System.String,Z.Dapper.Plus.DestinationType)">
            <summary>Constructor.</summary>
            <param name="sourceName">The source name.</param>
            <param name="destinationName">The destination name.</param>
            <param name="destinationType">(Optional) Type of the destination.</param>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1.SelectorFactory">
            <summary>Gets or sets the selector factory.</summary>
            <value>The selector factory.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1.SourceName">
            <summary>Gets or sets the source name.</summary>
            <value>The source name.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1.DestinationName">
            <summary>Gets or sets the destination name.</summary>
            <value>The destination name.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1.DestinationType">
            <summary>Gets or sets the type of the destination.</summary>
            <value>The type of the destination.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusExpressionMapper.DapperPlusExpressionMapper`1.AutoPropagateIdentity">
            <summary>Gets or sets a value indicating whether the propagate identity.</summary>
            <value>True if propagate identity, false if not.</value>
        </member>
        <member name="T:Z.Dapper.Plus.DapperPlusManager">
            <summary>Manager for dapper plus.</summary>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusManager.DefaultContext">
            <summary>Gets or sets the default context.</summary>
            <value>The default context.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusManager.ThrowErrorIfNotMapped">
            <summary>Gets or sets a value indicating whether the throw error if not mapped.</summary>
            <value>True if throw error if not mapped, false if not.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusManager.IsMapperLocked">
            <summary>Gets or sets a value indicating whether this object is mapper locked. When locked, anything that could affect the mapping will start to throw a "locked" error.</summary>
            <value>True if this object is mapper locked, false if not. When locked, anything that could affect the mapping will start to throw a "locked" error.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusManager.MapperCache">
            <summary>Gets or sets the mapper cache.</summary>
            <value>The mapper cache.</value>
        </member>
        <member name="P:Z.Dapper.Plus.DapperPlusManager.MapperFactory">
            <summary>Gets or sets the mapper factory.</summary>
            <value>The mapper factory.</value>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.Entity``1(System.String)">
            <summary>Get or create a new mapper for the specified type and mapper key.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <returns>A DapperPlusConfig&lt;T&gt;</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.Entity(System.Type,System.String)">
            <summary>Get or create a new mapper for the specified type and mapper key.</summary>
            <param name="type">The type.</param>
            <param name="mapperKey">The mapper key.</param>
            <returns>A DapperPlusConfig</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.RemoveEntity``1(System.String)">
            <summary>Removes the mapper for the specified type and mapper key.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.IsMappedEntity``1(System.String)">
            <summary>Check if a mapping exists for the specified type and mapper key.</summary>
            <param name="mapperKey">The mapper key.</param>
            <returns>True if a mapping exists for the specified type and mapper key.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.IsMapped">
            <summary>Check if at least one mapping has been added.</summary>
            <returns>True if at least one mapping has been added.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.AddCustomSupportedType(System.String)">
            <summary>Adds a new supported type to the list of type supported by Dapper Plus.</summary>
            <param name="fullName">The type.FullName.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.AddCustomSupportedType(System.Type)">
            <summary>Adds a new supported type to the list of type supported by Dapper Plus.</summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.AddValueConverter(System.Type,Z.BulkOperations.IBulkValueConverter)">
            <summary>Adds a ValueConverter for a specific type.</summary>
            <param name="type">The type.</param>
            <param name="valueConverter">The value converter.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.AddValueConverter``1(Z.BulkOperations.BulkValueConverter{``0})">
            <summary>Adds a generic ValueConverter.</summary>
            <param name="type">The type.</param>
            <param name="valueConverter">The value converter.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.AddLicense(System.String,System.String)">
            <summary>Adds a PRO License to activate all features.</summary>
            <param name="licenseName">The license name.</param>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.ValidateLicense(Z.Dapper.Plus.DapperProviderType)">
            <summary>Validates if license added is valid.</summary>
            <param name="provider">The provider specific for the license.</param>
            <returns>true if it's valid, false if it's invalid.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.DapperPlusManager.ValidateLicense(System.String@,Z.Dapper.Plus.DapperProviderType)">
            <summary>Validates the license.</summary>
            <param name="errorMessage">[out] Message describing the error.</param>
            <param name="provider">(Optional) The provider.</param>
            <returns>True if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:Z.Dapper.Plus.DapperProviderType">
            <summary>Values that represent Provider.</summary>
        </member>
        <member name="T:Z.Dapper.Plus.IDapperPlusActionSet`1">
            <summary>Interface for DapperPlusActionSet.</summary>
            <remarks>
                This interface is used in extension method to allow chaining. The out parameter modifier
                allow to support multiple type like IDapperPlusActionSet&lt;IEnumerable&lt;T&gt;&gt;. The
                interface may look worthless but is very useful for keeping the IntelliSense with the lambda
                expression.
            </remarks>
            <typeparam name="TEntity">Type of the entity.</typeparam>
        </member>
        <member name="M:Z.Dapper.Plus.IDapperPlusActionSet`1.AddAction``1(System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Func{``0,System.Object}[])">
            <summary>Adds an action to the action set.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="mapperKey">The mapper key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="selectors">The selection of entities to perform an action on.</param>
        </member>
        <member name="M:Z.Dapper.Plus.IDapperPlusActionSet`1.AddAction``1(Z.Dapper.Plus.DapperPlusActionKind,System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Adds an action to the action set.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="actionKind">The action kind.</param>
            <param name="entities">The entities.</param>
            <param name="forEachAction">for each action.</param>
        </member>
        <member name="M:Z.Dapper.Plus.IDapperPlusActionSet`1.CreateDapperAction``2(System.String,Z.Dapper.Plus.DapperPlusActionKind,System.Func{``0,``1}[])">
            <summary>Creates a new dapper action and perform an action on the selection of entities.</summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="mapperKey">The key.</param>
            <param name="actionKind">The action kind.</param>
            <param name="selectors">The selection of entities to perform an action on.</param>
            <returns>The new dapper action.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.IDapperPlusActionSet`1.CreateDapperAction``1(Z.Dapper.Plus.DapperPlusActionKind,System.Action{``0})">
            <summary>
                Creates a new dapper action and perform an action on the selection of entities.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <param name="actionKind">The action kind.</param>
            <param name="action">The action.</param>
            <returns>The new dapper action.</returns>
        </member>
        <member name="M:Z.Dapper.Plus.IDapperPlusActionSet`1.CreateDapperActionOneToOne``1(Z.Dapper.Plus.DapperPlusActionKind,System.Action{``0})">
            <summary>
                Creates a new dapper action and perform an action on the selection of entities.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <param name="actionKind">The action kind.</param>
            <param name="action">The action.</param>
            <returns>The new dapper action.</returns>
        </member>
        <member name="T:Z.Dapper.Plus.DestinationType">
            <summary>Values that represent destination types.</summary>
        </member>
        <member name="T:Z.BulkOperations.AuditModeType">
            <summary>Values that represent AuditModeType.</summary>
        </member>
        <member name="T:Z.BulkOperations.AuditActionType">
            <summary>Values that represent AuditActionType.</summary>
        </member>
        <member name="F:Z.BulkOperations.AuditActionType.Delete">
            <summary>An enum constant representing the delete option.</summary>
        </member>
        <member name="F:Z.BulkOperations.AuditActionType.Insert">
            <summary>An enum constant representing the insert option.</summary>
        </member>
        <member name="F:Z.BulkOperations.AuditActionType.Update">
            <summary>An enum constant representing the update option.</summary>
        </member>
        <member name="T:Z.BulkOperations.AuditEntry">
            <summary>An audit entry.</summary>
        </member>
        <member name="P:Z.BulkOperations.AuditEntry.Action">
            <summary>Gets or sets the action.</summary>
            <value>The action.</value>
        </member>
        <member name="P:Z.BulkOperations.AuditEntry.Date">
            <summary>Gets or sets the Date/Time of the date.</summary>
            <value>The date.</value>
        </member>
        <member name="P:Z.BulkOperations.AuditEntry.Metas">
            <summary>Gets or sets the metas.</summary>
            <value>The metas.</value>
        </member>
        <member name="P:Z.BulkOperations.AuditEntry.TableName">
            <summary>Gets or sets the name of the table.</summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:Z.BulkOperations.AuditEntry.Values">
            <summary>Gets or sets the values.</summary>
            <value>The values.</value>
        </member>
        <member name="T:Z.BulkOperations.AuditEntryItem">
            <summary>An audit entry item.</summary>
        </member>
        <member name="P:Z.BulkOperations.AuditEntryItem.ColumnName">
            <summary>Gets or sets the name of the column.</summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:Z.BulkOperations.AuditEntryItem.NewValue">
            <summary>Gets or sets the new value.</summary>
            <value>The new value.</value>
        </member>
        <member name="P:Z.BulkOperations.AuditEntryItem.OldValue">
            <summary>Gets or sets the old value.</summary>
            <value>The old value.</value>
        </member>
        <member name="T:Z.BulkOperations.AutoMapType">
            <summary>Values that represent AutoMapType.</summary>
        </member>
        <member name="T:Z.BulkOperations.BasicBulkOperation">
            <summary>A basic bulk operation.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkDelete">
            <summary>Bulk delete.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkDelete(System.Object)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkDelete(System.Data.DataTable,System.Data.DataRowState)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkDeleteAsync(System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkDeleteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkDeleteAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkInsert">
            <summary>Bulk insert.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkInsert(System.Object)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkInsert(System.Data.DataTable,System.Data.DataRowState)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkInsertAsync(System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkInsertAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkInsertAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkMerge">
            <summary>Bulk merge.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkMerge(System.Object)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkMerge(System.Data.DataTable,System.Data.DataRowState)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkMergeAsync(System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkMergeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkMergeAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkSaveChanges(System.Data.DataTable)">
            <summary>Bulk save changes.</summary>
            <param name="dt">The datatable.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkSaveChangesAsync(System.Data.DataTable,System.Threading.CancellationToken)">
            <summary>Bulk save changes.</summary>
            <param name="dt">The datatable.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkSynchronize">
            <summary>Bulk synchronize.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkSynchronize(System.Object)">
            <summary>Bulk synchronize.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkSynchronizeAsync(System.Threading.CancellationToken)">
            <summary>Bulk synchronize.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkSynchronizeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk synchronize.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkUpdate">
            <summary>Bulk update.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkUpdate(System.Object)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkUpdate(System.Data.DataTable,System.Data.DataRowState)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkUpdateAsync(System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkUpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.BulkUpdateAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation.Advanced">
            <summary>Gets or sets the advanced.</summary>
            <value>The advanced.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation.BatchSize">
            <summary>Gets or sets the size of the batch.</summary>
            <value>The size of the batch.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation.ColumnMappings">
            <summary>Gets or sets the column mappings.</summary>
            <value>The column mappings.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation.Connection">
            <summary>Gets or sets the connection.</summary>
            <value>The connection.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation.DataSource">
            <summary>Gets or sets the data source.</summary>
            <value>The data source.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation.DestinationTableName">
            <summary>Gets or sets the name of the destination table.</summary>
            <value>The name of the destination table.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation.Transaction">
            <summary>Gets or sets the transaction.</summary>
            <value>The transaction.</value>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="T:Z.BulkOperations.BasicBulkOperation`1">
            <summary>A basic bulk operation.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkDelete">
            <summary>Bulk delete.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkDelete(System.Collections.Generic.List{`0})">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkDeleteAsync(System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkDeleteAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkInsert">
            <summary>Bulk insert.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkInsert(System.Collections.Generic.List{`0})">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkInsertAsync(System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkInsertAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkMerge">
            <summary>Bulk merge.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkMerge(System.Collections.Generic.List{`0})">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkMergeAsync(System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkMergeAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkSynchronize">
            <summary>Bulk synchronize.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkSynchronize(System.Collections.Generic.List{`0})">
            <summary>Bulk synchronize.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkSynchronizeAsync(System.Threading.CancellationToken)">
            <summary>Bulk synchronize.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkSynchronizeAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk synchronize.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkUpdate">
            <summary>Bulk update.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkUpdate(System.Collections.Generic.List{`0})">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkUpdateAsync(System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.BulkUpdateAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.DeleteFromQuery(System.Func{System.Linq.IQueryable{`0},System.Collections.Generic.IEnumerable{`0}})">
            <summary>Deletes from IQueryable.</summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.#ctor">
            <summary>None constructor.</summary>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.Advanced">
            <summary>Gets or sets the advanced.</summary>
            <value>The advanced.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.BatchSize">
            <summary>Gets or sets the size of the batch.</summary>
            <value>The size of the batch.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.ColumnMappings">
            <summary>Gets or sets the column mappings.</summary>
            <value>The column mappings.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.ColumnInputExpression">
            <summary>Gets or sets the column input expression.</summary>
            <value>The column input expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.ColumnOutputExpression">
            <summary>Gets or sets the column output expression.</summary>
            <value>The column output expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.ColumnPrimaryKeyExpression">
            <summary>Gets or sets the column primary key expression.</summary>
            <value>The column primary key expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.Connection">
            <summary>Gets or sets the connection.</summary>
            <value>The connection.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.DataSource">
            <summary>Gets or sets the data source.</summary>
            <value>The data source.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.DestinationTableName">
            <summary>Gets or sets the name of the destination table.</summary>
            <value>The name of the destination table.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicBulkOperation`1.Transaction">
            <summary>Gets or sets the transaction.</summary>
            <value>The transaction.</value>
        </member>
        <member name="M:Z.BulkOperations.BasicBulkOperation`1.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                unmanaged resources.
            </summary>
        </member>
        <member name="T:Z.BulkOperations.BasicColumnMapping">
            <summary>A column mapping.</summary>
            <summary>A column mapping.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor">
            <summary>Inherit constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.Int32,System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.Int32,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String,System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String,System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.Int32,System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.String,System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping.#ctor(System.Int32,System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping.Advanced">
            <summary>Gets the advanced.</summary>
            <value>The advanced.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping.DestinationName">
            <summary>Gets or sets the name of the destination.</summary>
            <value>The name of the destination.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping.DestinationOrdinal">
            <summary>Gets or sets destination ordinal.</summary>
            <value>The destination ordinal.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping.Direction">
            <summary>Gets or sets the direction.</summary>
            <value>The direction.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping.IsPrimaryKey">
            <summary>Gets or sets a value indicating whether this object is primary key.</summary>
            <value>true if this object is primary key, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping.SourceName">
            <summary>Gets or sets the name of the source.</summary>
            <value>The name of the source.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping.SourceOrdinal">
            <summary>Gets or sets source ordinal.</summary>
            <value>The source ordinal.</value>
        </member>
        <member name="T:Z.BulkOperations.BasicColumnMapping`1">
            <summary>A column mapping.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor">
            <summary>Inherit constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Int32,System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Int32,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String,System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Int32,System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.String,System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Int32,System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.BasicColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.Advanced">
            <summary>Gets the advanced.</summary>
            <value>The advanced.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.DestinationExpression">
            <summary>Gets or sets destination expression.</summary>
            <value>The destination expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.DestinationName">
            <summary>Gets or sets the name of the destination.</summary>
            <value>The name of the destination.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.DestinationOrdinal">
            <summary>Gets or sets destination ordinal.</summary>
            <value>The destination ordinal.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.Direction">
            <summary>Gets or sets the direction.</summary>
            <value>The direction.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.IsPrimaryKey">
            <summary>Gets or sets a value indicating whether this object is primary key.</summary>
            <value>true if this object is primary key, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.SourceExpression">
            <summary>Gets or sets source expression.</summary>
            <value>The source expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.SourceName">
            <summary>Gets or sets the name of the source.</summary>
            <value>The name of the source.</value>
        </member>
        <member name="P:Z.BulkOperations.BasicColumnMapping`1.SourceOrdinal">
            <summary>Gets or sets source ordinal.</summary>
            <value>The source ordinal.</value>
        </member>
        <member name="M:Z.BulkOperations.BulkOperationManager.AddValueConverter(System.Type,Z.BulkOperations.IBulkValueConverter)">
            <summary>Adds a ValueConverter for a specific type.</summary>
            <param name="type">The type.</param>
            <param name="valueConverter">The value converter.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperationManager.AddValueConverter``1(Z.BulkOperations.BulkValueConverter{``0})">
            <summary>Adds a generic ValueConverter.</summary>
            <param name="type">The type.</param>
            <param name="valueConverter">The value converter.</param>
        </member>
        <member name="F:Z.BulkOperations.BulkOperationManager.BulkOperationBuilder">
            <summary>Set the builder that will apply to all bulk operation instance.</summary>
        </member>
        <member name="F:Z.BulkOperations.BulkOperationManager.ColumnMappingBuilder">
            <summary>The column mapping builder.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationManager.IsCommunity">
            <summary>Gets or sets a value indicating whether the library is in community mode (automatically throw an error for all paid features).</summary>
            <value>True if the library is in community mode (automatically throw an error for all paid features).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationManager.Cache">
            <summary>Gets or sets the cache to use.</summary>
            <value>The cache to use.</value>
        </member>
        <member name="F:Z.BulkOperations.BulkOperationManager.UseOracleArray">
            <summary>Array of use oracles.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationManager.ForceExpandoAsDictionaryEntryName">
            <summary>
            Gets or sets a value indicating whether the expando as dictionary entry name should be
            forced.
            </summary>
            <value>true if force expando as dictionary entry name, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationManager.ForceSelectOutput">
            <summary>
            Gets or sets a value indicating whether the select output should be forced.
            </summary>
            <value>true if force select output, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationManager.CustomProvider">
            <summary>Gets or sets the custom provider.</summary>
            <value>The custom provider.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationManager.ForceTriggerResolution">
            <summary>
            Gets or sets a value indicating whether the trigger resolution should be forced.
            </summary>
            <value>True if force trigger resolution, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationManager.TmpIsTransientError">
            <summary>For internal/experience usage only.</summary>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkDelete">
            <summary>Bulk delete.</summary>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkDelete(System.Object)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkDelete(System.Data.DataTable,System.Data.DataRowState)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkDeleteAsync(System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkDeleteAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkDeleteAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkInsert">
            <summary>Bulk insert.</summary>
            <example>
                text
                <code>var x = 1+2</code></example>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkInsert(System.Object)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <example>
                text
                <code>var x = 1+2</code>
                text2
                <code>var x = 1+3</code></example>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkInsert(System.Data.DataTable,System.Data.DataRowState)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <example>
                text
                <code>var x = 1+2</code><code>var x = 1+4</code>
                text2
                <code>var x = 1+3</code>
                text 4
            </example>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkInsertAsync(System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkInsertAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkInsertAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkMerge">
            <summary>Bulk merge.</summary>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkMerge(System.Object)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkMerge(System.Data.DataTable,System.Data.DataRowState)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkMergeAsync(System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkMergeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkMergeAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkSaveChanges(System.Data.DataTable)">
            <summary>Bulk save changes.</summary>
            <param name="dt">The datatable.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkSaveChangesAsync(System.Data.DataTable,System.Threading.CancellationToken)">
            <summary>Bulk save changes.</summary>
            <param name="dt">The datatable.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkSynchronize">
            <summary>Bulk synchronize.</summary>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkSynchronize(System.Object)">
            <summary>Bulk synchronize.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkSynchronizeAsync(System.Threading.CancellationToken)">
            <summary>Bulk synchronize.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkSynchronizeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk synchronize.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkUpdate">
            <summary>Bulk update.</summary>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkUpdate(System.Object)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkUpdate(System.Data.DataTable,System.Data.DataRowState)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkUpdateAsync(System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkUpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.BulkUpdateAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
            <param name="dataRowState">State of the data row.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation.Recompile">
            <summary>Recompiles this object.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AuditEntries">
            <summary>Gets or sets the audit entries.</summary>
            <value>The audit entries.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AuditMode">
            <summary>Gets or sets the audit mode.</summary>
            <value>The audit mode.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseAudit">
            <summary>Gets or sets a value indicating whether this object use audit.</summary>
            <value>true if use audit, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TestExecuteAsync">
            <summary>For internal/experience usage only.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ForceRowsAffectedValidation">
            <summary>
            Gets or sets a value indicating whether the rows affected validation should be forced for BulkSaveChanges in Entity Framework
            </summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.InternalOptions">
            <summary>Internal Options. DO NOT USE IT.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UsePostgreSqlInsertOnConflictDoNothing">
            <summary>
            Gets or sets a value indicating whether instead of checking with the primary key, the SQL generated should do "ON CONFLICT (key) DO NOTHING"
            </summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UsePostgreSqlTimeZone">
            <summary>
            Gets or sets a value indicating whether this object use PostgreSQL time zone.
            </summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UsePostgreSqlGetInformationSchema2">
            <summary>
            Gets or sets a value indicating whether we should directly use the PostgreSQL faillack to retrieve schema information
            </summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoMap">
            <summary>Gets or sets the automatic map.</summary>
            <value>The automatic map.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoMapKeyName">
            <summary>Gets or sets the name of the automatic map key.</summary>
            <value>The name of the automatic map key.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoMapIdentityName">
            <summary>Gets or sets the name of the automatic map identity.</summary>
            <value>The name of the automatic map identity.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoMapOutputIdentity">
            <summary>Gets or sets if the identity should be returned when the auto mapping is used.</summary>
            <value>If the identity should be returned when the auto mapping is used.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoMapKeyExpression">
            <summary>Gets or sets the automatic map key expression.</summary>
            <value>The automatic map key expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoMapIdentityExpression">
            <summary>Gets or sets the automatic map identity expression.</summary>
            <value>The automatic map identity expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoMapValueFactory">
            <summary>Gets or sets the factory to use in value when AutoMap is used.</summary>
            <value>The factory to use in value when AutoMap is used.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoMapColumnBuilder">
            <summary>Gets or sets the builder to use when a new column AutoMapped is added.</summary>
            <value>The builder to use when a new column AutoMapped is added.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.BatchDelayInterval">
            <summary>Gets or sets the batch delay interval.</summary>
            <value>The batch delay interval.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.BatchSize">
            <summary>Gets or sets the size of the batch.</summary>
            <value>The size of the batch.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CombineMaxCommand">
            <summary>Gets or sets the maximum command that can be combined in a single batch (BulkSaveChanges only, DefaultValue=25).</summary>
            <value>The maximum command that can be combined in a single batch (BulkSaveChanges only, DefaultValue=25).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.BatchTimeout">
            <summary>Gets or sets the batch timeout.</summary>
            <value>The batch timeout.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CaseSensitive">
            <summary>Gets or sets the case sensitive mode.</summary>
            <value>The case sensitive mode.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnInputNames">
            <summary>Gets or sets a list of property names to input.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnInputOutputNames">
            <summary>Gets or sets a list of property names to input/output.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnOutputNames">
            <summary>Gets or sets a list of property names to output.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnPrimaryKeyNames">
            <summary>Gets or sets a list of property names of primary key.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnSynchronizeDeleteKeySubsetNames">
            <summary>Gets or sets a list of property names to use in synchronize delete key subset.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeInsertNames">
            <summary>Gets or sets a list of property names to ignore on merge insert.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeUpdateNames">
            <summary>Gets or sets a list of property names to ignore on merge update.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnSynchronizeInsertNames">
            <summary>Gets or sets a list of property names to ignore on synchronize insert.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnSynchronizeUpdateNames">
            <summary>Gets or sets a list of property names to ignore on synchronize update.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnInsertNames">
            <summary>Gets or sets a list of property names to ignore on insert.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnUpdateNames">
            <summary>Gets or sets a list of property names to ignore on update.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergeMatchedAndConditionNames">
            <summary>Gets or sets a list of property names to use in the `AND CONDITION` when merge update is matched.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergeMatchedAndOneNotConditionNames">
            <summary>Gets or sets a list of property names to use in the `AND (ONE NOT MEET CONDITION)` when merge update is matched.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UpdateMatchedAndConditionNames">
            <summary>Gets or sets a list of property names to use in the `AND CONDITION` when update is matched.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UpdateMatchedAndOneNotConditionNames">
            <summary>Gets or sets a list of property names to use in the `AND (ONE NOT MEET CONDITION)` when update is matched.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DeleteMatchedAndConditionNames">
            <summary>Gets or sets a list of property names to use in the `AND CONDITION` when delete is matched.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DeleteMatchedAndOneNotConditionNames">
            <summary>Gets or sets a list of property names to use in the `AND (ONE NOT MEET CONDITION)` when delete is matched.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeMatchedAndConditionNames">
            <summary>Gets or sets a list of property names to use in the `AND CONDITION` when synchronize (merge) update is matched.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeMatchedAndOneNotConditionNames">
            <summary>Gets or sets a list of property names to use in the `AND (ONE NOT MEET CONDITION)` when synchronize (merge) update is matched.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeMatchedAndConditionNames">
            <summary>Gets or sets a list of property names to ignore in the `AND CONDITION` when merge update is matched. All columns are part of the condition except those from the ignore.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeMatchedAndOneNotConditionNames">
            <summary>Gets or sets a list of property names to ignore in the `AND (ONE NOT MEET CONDITION)` when merge update is matched. All columns are part of the condition except those from the ignore.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnDeleteMatchedAndConditionNames">
            <summary>Gets or sets a list of property names to ignore in the `AND CONDITION` when delete is matched. All columns are part of the condition except those from the ignore.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnDeleteMatchedAndOneNotConditionNames">
            <summary>Gets or sets a list of property names to ignore in the `AND (ONE NOT MEET CONDITION)` when delete is matched. All columns are part of the condition except those from the ignore.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnUpdateMatchedAndConditionNames">
            <summary>Gets or sets a list of property names to ignore in the `AND CONDITION` when update is matched. All columns are part of the condition except those from the ignore.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnUpdateMatchedAndOneNotConditionNames">
            <summary>Gets or sets a list of property names to ignore in the `AND (ONE NOT MEET CONDITION)` when update is matched. All columns are part of the condition except those from the ignore.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnSynchronizeMatchedAndConditionNames">
            <summary>Gets or sets a list of property names  to ignore in the `AND CONDITION` when synchronize (merge) update is matched. All columns are part of the condition except those from the ignore.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnSynchronizeMatchedAndOneNotConditionNames">
            <summary>Gets or sets a list of property names to ignore in the `AND (ONE NOT MEET CONDITION)` when synchronize (merge) update is matched. All columns are part of the condition except those from the ignore.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceOnMergeUpdateNames">
            <summary>Gets or sets a list of property names to use for columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceDestinationOnMergeUpdateNames">
            <summary>Gets or sets a list of property names to use for columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceOnSynchronizeUpdateNames">
            <summary>Gets or sets a list of property names to use for columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceDestinationOnSynchronizeUpdateNames">
            <summary>Gets or sets a list of property names to use for columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceOnUpdateNames">
            <summary>Gets or sets a list of property names to use for columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceDestinationOnUpdateNames">
            <summary>Gets or sets a list of property names to use for columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnMergeUpdateInputNames">
            <summary>Gets or sets a list of property names to input during the Merge Update statement.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnMergeInsertInputNames">
            <summary>Gets or sets a list of property names to input during the Merge Insert statement.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnSynchronizeUpdateInputNames">
            <summary>Gets or sets a list of property names to input during the Synchronize Update statement.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnSynchronizeInsertInputNames">
            <summary>Gets or sets a list of property names to input during the Synchronize Insert statement.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnStagingTableFormulaNames">
            <summary>Gets or sets a list of property names to use for formula.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreColumnOutputNames">
            <summary>Gets or sets columns output to ignore using names.</summary>
            <value>The columns output to ignore using names.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnInputExpression">
            <summary>Gets or sets the column input expression.</summary>
            <value>The column input expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnInputOutputExpression">
            <summary>Gets or sets the column input/output expression.</summary>
            <value>The column input/output expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnOutputExpression">
            <summary>Gets or sets the column output expression.</summary>
            <value>The column output expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnPrimaryKeyExpression">
            <summary>Gets or sets the column primary key expression.</summary>
            <value>The column primary key expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnSynchronizeDeleteKeySubsetExpression">
            <summary>Gets or sets the column synchronize delete key subset expression.</summary>
            <value>The column synchronize delete key subset expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreColumnOutputExpression">
            <summary>Gets or sets columns output to ignore using an expression.</summary>
            <value>The columns output to ignore using an expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnInsertExpression">
            <summary>Gets or sets the ignore on insert expression.</summary>
            <value>The ignore on insert expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnUpdateExpression">
            <summary>Gets or sets the ignore on update expression.</summary>
            <value>The ignore on update expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeInsertExpression">
            <summary>Gets or sets the ignore on merge insert expression.</summary>
            <value>The ignore on merge insert expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeUpdateExpression">
            <summary>Gets or sets the ignore on merge update expression.</summary>
            <value>The ignore on merge update expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnSynchronizeInsertExpression">
            <summary>Gets or sets the ignore on synchronize insert expression.</summary>
            <value>The ignore on synchronize insert expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnSynchronizeUpdateExpression">
            <summary>Gets or sets the ignore on synchronize update expression.</summary>
            <value>The ignore on synchronize update expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergeMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when merge update is matched.</summary>
            <value>The `AND CONDITION` to add when merge update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergeMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when merge update is matched.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when merge update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UpdateMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when update is matched.</summary>
            <value>The `AND CONDITION` to add when update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UpdateMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when update is matched.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DeleteMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when delete is matched.</summary>
            <value>The `AND CONDITION` to add when delete is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DeleteMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when delete is matched.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when delete is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when synchronize (merge) update is matched.</summary>
            <value>The `AND CONDITION` to add when synchronize (merge) update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when synchronize (merge) update is matched.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when synchronize (merge) update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND CONDITION` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnDeleteMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when delete is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND CONDITION` to add when delete is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnDeleteMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when delete is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when delete is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnUpdateMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND CONDITION` to add when update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnUpdateMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnSynchronizeMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when synchronize (merge) update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND CONDITION` to add when synchronize (merge) update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnSynchronizeMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when synchronize (merge) update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when synchronize (merge) update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceOnMergeUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
            <value>The columns to coalesce, ISNULL(StagingValue, DestinationValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceDestinationOnMergeUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
            <value>The columns to coalesce, ISNULL(DestinationValue, StagingValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceOnSynchronizeUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
            <value>The columns to coalesce, ISNULL(StagingValue, DestinationValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceDestinationOnSynchronizeUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
            <value>The columns to coalesce, ISNULL(DestinationValue, StagingValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceOnUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
            <value>The columns to coalesce, ISNULL(StagingValue, DestinationValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CoalesceDestinationOnUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
            <value>The columns to coalesce, ISNULL(DestinationValue, StagingValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnMergeUpdateInputExpression">
            <summary>Gets or sets columns to input during the Merge Update statement.</summary>
            <value>The columns to input during the Merge Update statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnMergeInsertInputExpression">
            <summary>Gets or sets columns to input during the Merge Insert statement.</summary>
            <value>The columns to input during the Merge Insert statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnSynchronizeUpdateInputExpression">
            <summary>Gets or sets columns to input during the Synchronize Update statement.</summary>
            <value>The columns to input during the Synchronize Update statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnSynchronizeInsertInputExpression">
            <summary>Gets or sets columns to input during the Synchronize Insert statement.</summary>
            <value>The columns to input during the Synchronize Insert statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnStagingTableFormulaExpression">
            <summary>Gets or sets columns that should be added to be used in formula.</summary>
            <value>The columns that should be added to be used in formula.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnMappings">
            <summary>Gets or sets the column mappings.</summary>
            <value>The column mappings.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnMergeUpdateUseCoalesce">
            <summary>
            Gets or sets a value indicating whether the on merge update use coalesce.
            </summary>
            <value>True if on merge update use coalesce, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnMergeUpdateUseCoalesceDestination">
            <summary>
            Gets or sets a value indicating whether the on merge update use coalesce for destination.
            </summary>
            <value>True if on merge update use coalesce for destination, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnUpdateUseCoalesce">
            <summary>
            Gets or sets a value indicating whether the on update use coalesce.
            </summary>
            <value>True if on update use coalesce, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnUpdateUseCoalesceDestination">
            <summary>
            Gets or sets a value indicating whether the on update use coalesce for destination.
            </summary>
            <value>True if on update use coalesce for destination, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnSynchronizeUpdateUseCoalesce">
            <summary>
            Gets or sets a value indicating whether the on synchronize update use coalesce.
            </summary>
            <value>True if on synchronize update use coalesce, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.OnSynchronizeUpdateUseCoalesceDestination">
            <summary>
            Gets or sets a value indicating whether the on synchronize update use coalesce for destination.
            </summary>
            <value>True if on synchronize update use coalesce for destination, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DefaultValueResolution">
            <summary>Gets or sets the default value resolution.</summary>
            <value>The default value resolution.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MatchNamesWithUnderscores">
            <summary>
            Gets or sets if underscore should be ignore for column name. The column "Order_Type" will be mapped to "OrderType" property.
            </summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseSmartMatchNames">
            <summary>
            Gets or sets if underscore, dot, and space should be ignored when matching the column name. This option is an upgrade from `MatchNamesWithUnderscores` for backward compatibility.
            </summary>
            <value>True if underscore, dot, and space should be ignored when matching the column name. This option is an upgrade from `MatchNamesWithUnderscores` for backward compatibility.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CommandParameterAddRowIndex">
            <summary>Gets or sets a value indicating whether the command parameter add row index.</summary>
            <value>true if command parameter add row index, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CommandParameterPrefix">
            <summary>Gets or sets the command parameter prefix.</summary>
            <value>The command parameter prefix.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CommandParameterSuffix">
            <summary>Gets or sets the command parameter suffix.</summary>
            <value>The command parameter suffix.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseCompile">
            <summary>Gets or sets a value indicating whether this object use compile.</summary>
            <value>true if use compile, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.Connection">
            <summary>Gets or sets the connection.</summary>
            <value>The connection.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ConnectionName">
            <summary>Gets or sets the name of the connection.</summary>
            <value>The name of the connection.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ConnectionFactory">
            <summary>Gets or sets the connection factory.</summary>
            <value>The connection factory.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.CustomProvider">
            <summary>Gets or sets the custom provider.</summary>
            <value>The custom provider.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DataSource">
            <summary>Gets or sets the data source.</summary>
            <value>The data source.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DestinationTableName">
            <summary>Gets or sets the name of the destination table.</summary>
            <value>The name of the destination table.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DestinationSchemaName">
            <summary>Gets or sets the name of the destination schema.</summary>
            <value>The name of the destination schema.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DisableDotCheckForEscapeTableName">
            <summary>
            Gets or sets a value indicating whether the dot check for escape table name is disabled.
            </summary>
            <value>True if disable dot check for escape table name, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseLegacyBatchOperation">
            <summary>
            Gets or sets a value indicating whether this object use legacy batch operation (Logic used before v6.x)
            </summary>
            <value>True if use legacy batch operation (Logic used before v6.x), false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ErrorMode">
            <summary>Gets or sets the error mode.</summary>
            <value>The error mode.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.Errors">
            <summary>Gets or sets the error objects.</summary>
            <value>The error objects.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.BulkOperationExecuting">
            <summary>Gets or sets the bulk operation executing.</summary>
            <value>The bulk operation executing.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.BulkOperationExecuted">
            <summary>Gets or sets the bulk operation executed.</summary>
            <value>The bulk operation executed.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DeleteFromQueryExecuted">
            <summary>Gets or sets the delete from query executed.</summary>
            <value>The delete from query executed.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergeStagingTableFilterFormula">
            <summary>Gets or sets a SQL Formula to prefilter the staging table for the BulkMerge operation.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.InsertStagingTableFilterFormula">
            <summary>Gets or sets a SQL Formula to prefilter the staging table for the BulkInsert operation.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UpdateStagingTableFilterFormula">
            <summary>Gets or sets a SQL Formula to prefilter the staging table for the BulkUpdate operation.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DeleteStagingTableFilterFormula">
            <summary>Gets or sets a SQL Formula to prefilter the staging table for the BulkDelete operation.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeDeleteDestinationTableFilterFormula">
            <summary>Gets or sets the formula to use to filter the DestinationTable (Only for BulkSynchronize during the Delete phase | Support SQL Server only).</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeSoftDeleteFormula">
            <summary>Gets or sets the synchronize soft delete SQL formula that replace the DELETE statement.</summary>
            <value>The synchronize soft delete SQLformula that replace the DELETE statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.InsertNotMatchedAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the insert (merge) "NOT MATCHED" statement. Using "InsertPrimaryKeyAndFormula" or "InsertStagingTableFilterFormula" is recommanded over this options.</summary>
            <value>The formula to add after the "AND" in the insert (merge) "NOT MATCHED" statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergeNotMatchedAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the merge "NOT MATCHED" statement.</summary>
            <value>The formula to add after the "AND" in the merge "NOT MATCHED" statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeNotMatchedAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the synchronize (merge) "NOT MATCHED" statement.</summary>
            <value>The formula to add after the "AND" in the synchronize (merge) "NOT MATCHED" statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergeMatchedAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the merge statement.</summary>
            <value>The formula to add after the "AND" in the merge statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeMatchedAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the synchronize (merge) statement.</summary>
            <value>The formula to add after the "AND" in the synchronize (merge) statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UpdateMatchedAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the update statement (in the merge part).</summary>
            <value>The formula to add after the "AND" in the update statement (in the merge part).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DeleteMatchedAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the delete statement (in the merge part).</summary>
            <value>The formula to add after the "AND" in the delete statement (in the merge part).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UpdatePrimaryKeyAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the update statement when joining with the key.</summary>
            <value>The formula to add after the "AND" in the update statement  when joining with the key.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergePrimaryKeyAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the merge statement when joining with the key (WARNING: If the destination table is empty, the condition is always true and rows are always inserted).</summary>
            <value>The formula to add after the "AND" in the merge statement  when joining with the key (WARNING: If the destination table is empty, the condition is always true and rows are always inserted).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.InsertPrimaryKeyAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the insert statement when joining with the key (WARNING: If the destination table is empty, the condition is always true and rows are always inserted).</summary>
            <value>The formula to add after the "AND" in the insert statement  when joining with the key (WARNING: If the destination table is empty, the condition is always true and rows are always inserted).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DeletePrimaryKeyAndFormula">
            <summary>Gets or sets the formula to add after the "AND" in the delete statement when joining with the key.</summary>
            <value>The formula to add after the "AND" in the delete statement  when joining with the key.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizePrimaryKeyAndFormulaDelete">
            <summary>Gets or sets the formula to add after the "AND" in the delete statement when joining with the key (Use 'SynchronizePrimaryKeyAndFormulaMerge' for INSERT/UPDATE).</summary>
            <value>The formula to add after the "AND" in the delete statement  when joining with the key (Use 'SynchronizePrimaryKeyAndFormulaMerge' for INSERT/UPDATE).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizePrimaryKeyAndFormulaMerge">
            <summary>Gets or sets the formula to add after the "AND" in the merge statement when joining with the key (Use 'SynchronizePrimaryKeyAndFormulaDelete' for the DELETE).</summary>
            <value>The formula to add after the "AND" in the merge statement  when joining with the key (Use 'SynchronizePrimaryKeyAndFormulaDelete' for the DELETE).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ColumnSynchronizeDeleteKeySubsetFormula">
            <summary>Gets or sets the column synchronize delete key subset formula (The SQL to make the JOIN statement for the DELETE part of the BulkSynchronize).</summary>
            <value>The column synchronize delete key subset formula (The SQL to make the JOIN statement for the DELETE part of the BulkSynchronize).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseStopwatchForSqlExecutingTime">
            <summary>
            Gets or sets a value indicating whether a stopwatch should be used to calculate the SQL executing time.
            </summary>
            <value>True if a stopwatch should be used to calculate the SQL executing time, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.StopwatchForSqlExecutingTime">
            <summary>Gets or sets the stopwatch to calculate the SQL executing time.</summary>
            <value>The stopwatch to calculate the SQL executing time.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.Log">
            <summary>Gets or sets the log.</summary>
            <value>The log.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.LogDump">
            <summary>Gets or sets the log dump.</summary>
            <value>The log dump.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseLogDump">
            <summary>Gets or sets a value indicating whether this object use log dump.</summary>
            <value>true if use log dump, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AddLogExecuting">
            <summary>Gets or sets an action to execute every time the log is used.</summary>
            <value>The  action to execute every time the log is used.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IgnoreOnMergeUpdate">
            <summary>Gets or sets a value indicating whether the UPDATE will be performed for the Merge method.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseOracleGlobalSequenceIndexTable">
            <summary>
                Gets or sets a value indicating whether this object use oracle global identity index
                table.
            </summary>
            <value>true if use oracle global identity index table, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ForceSelectOutput">
            <summary>
            Gets or sets a value indicating whether the select output should be forced.
            </summary>
            <value>true if force select output, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ParallelBatchByTask">
            <summary>Gets or sets the parallel batch by task.</summary>
            <value>The parallel batch by task.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ParallelMinBatch">
            <summary>Gets or sets the parallel minimum batch.</summary>
            <value>The parallel minimum batch.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ParallelMinRecord">
            <summary>Gets or sets the parallel minimum record.</summary>
            <value>The parallel minimum record.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseParallel">
            <summary>Gets or sets a value indicating whether this object use parallel.</summary>
            <value>true if use parallel, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AllowDuplicateKeys">
            <summary>Gets or sets a value indicating whether we allow duplicate kyes.</summary>
            <value>true if allow duplicate kyes, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AllowUpdatePrimaryKeys">
            <summary>Gets or sets a value indicating whether we allow update primary keys.</summary>
            <value>true if allow update primary keys, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.InsertIfNotExists">
            <summary>Gets or sets a value indicating whether the insert if not exists.</summary>
            <value>true if insert if not exists, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DisablePrimaryKeyNullCheck">
            <summary>Gets or sets if null check should be disabled when a surrogate keys is used (more than 1 key).</summary>
            <value>true if null check should be disabled when a surrogate keys is used (more than 1 key).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.Provider">
            <summary>Gets or sets the provider.</summary>
            <value>The provider.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ProviderAssembly">
            <summary>Gets or sets the provider assembly.</summary>
            <value>The provider assembly.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.Resolution">
            <summary>Gets or sets the resolution mode.</summary>
            <value>The resolution mode.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ForceTriggerResolution">
            <summary>
            Gets or sets a value indicating whether the trigger resolution should be forced.
            </summary>
            <value>True if force trigger resolution, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DisableInformationSchemaCache">
            <summary>
            Gets or sets a value indicating if the InformationSchema cache should be disabled or not.
            </summary>
            <value>True if the InformationSchema cache should be disabled.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ResultInfo">
            <summary>Gets or sets information describing the result.</summary>
            <value>Information describing the result.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.RowsAffected">
            <summary>Gets or sets the number of row affected by the last query.</summary>
            <value>The number of row affected by the last query.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseRowsAffected">
            <summary>Gets or sets if the RowAffected should be returned in the ResultInfo (will make the bulk operation slower).</summary>
            <value>True if the RowAffected should be returned in the ResultInfo (will make the bulk operation slower).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ValidateNoDuplicateKey">
            <summary>
            Gets or sets a value indicating if the library should check first if there is no duplicate key
            </summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DisableTemporaryTableClusteredIndex">
            <summary>
            Gets or sets a value indicating whether the temporary table clustered index creation is disabled. (SQL Server only)
            </summary>
            <value>True if disable temporary table clustered index creation, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.DisableSqlBulkCopyDirect">
            <summary>
            Gets or sets a value indicating whether the bulk copy direct is disabled.
            </summary>
            <value>True if disable bulk copy direct, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ForceOutputFromUnmodifiedRow">
            <summary>
            Gets or sets a value indicating whether unmodified row should also output values (only work with InsertIfNotExists + SQL Server at this moment).
            </summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.AutoTruncate">
            <summary>Gets or sets a value indicating whether string value are automatic truncated.</summary>
            <value>True if string value are automatic truncated, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IsReadOnly">
            <summary>Gets or sets a value indicating whether this object is read only.</summary>
            <value>True if this object is read only, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.IsCheckConstraintOnInsertDisabled">
            <summary>
            Gets or sets is Check Constraint is disabled on Insert. **DANGER**: This option force a SqlBulkCopy and is incompatible with almost all options.
            </summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SqlBulkCopyOptions">
            <summary>Gets or sets the provider.</summary>
            <value>The provider.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.MergeKeepIdentity">
            <summary>Gets or sets a value indicating whether the merge keep identity.</summary>
            <value>true if merge keep identity, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeKeepidentity">
            <summary>Gets or sets a value indicating whether the synchronize keep identity.</summary>
            <value>true if synchronize keep identity, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.InsertKeepIdentity">
            <summary>Gets or sets a value indicating whether the insert keep identity.</summary>
            <value>true if insert keep identity, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.HasColumnEncrypted">
            <summary>
                Gets or sets a value indicating whether this object has column encrypted.
            </summary>
            <value>true if this object has column encrypted, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseTempDbForColumnEncrypted">
            <summary>
                Gets or sets if the `tempdb` should be used to solve column encrypted resolution (false by default).
            </summary>
            <value>true if the `tempdb` should be used to solve column encrypted resolution (false by default).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeOnlyDelete">
            <summary>
                Gets or sets a value indicating whether the synchronize operation should only do the delete part.
            </summary>
            <value>true if the synchronize operation should only do the delete part, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.SynchronizeIgnoreUpdate">
            <summary>Gets or sets a value indicating whether the synchronize ignore the update part.</summary>
            <value>True if synchronize ignore the update part, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableBatchByTable">
            <summary>Gets or sets the temporary table batch by table.</summary>
            <value>The temporary table batch by table.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableInsertBatchSize">
            <summary>Gets or sets the size of the temporary table insert batch.</summary>
            <value>The size of the temporary table insert batch.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableMinRecord">
            <summary>Gets or sets the temporary table minimum record.</summary>
            <value>The temporary table minimum record.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableUseTableLock">
            <summary>Gets or sets a value indicating whether the temporary table use table is locked.</summary>
            <value>true if temporary table use table lock, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UseTableLock">
            <summary>Gets or sets a value indicating whether the destination table should be locked.</summary>
            <value>true if the destination table should be locked.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TableHintSql">
            <summary>Gets or sets the table hint SQL to use (SQL Server only).</summary>
            <value>The table hint SQL to use (SQL Server only).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableSchemaName">
            <summary>Gets or sets the name of the temporary table schema.</summary>
            <value>The name of the temporary table schema.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UsePermanentTable">
            <summary>Gets or sets if the code should use permanent table instead of temporary table.</summary>
            <value>if the code should use permanent table instead of temporary table.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableUseSameName">
            <summary>
            Gets or sets a value indicating whether the temporary table should use the same name for every bulk operation with the same destination table.
            </summary>
            <value>True if temporary table should use the same name for every bulk operation with the same destination table.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableName">
            <summary>Gets or sets the name of the temporary table.</summary>
            <value>The name of the temporary table.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableCreate">
            <summary>Gets or sets a value indicating whether the temporary table should be created by our library when specifying a "TemporaryTableName".</summary>
            <value>True if the temporary table should be created by our library when specifying a "TemporaryTableName".</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTablePersist">
            <summary>Gets or sets a value indicating whether the temporary table persist.</summary>
            <value>True if temporary table persist, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TemporaryTableIsMemory">
            <summary>Gets or sets a value indicating whether the temporary table is memory.</summary>
            <value>True if temporary table is memory, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.Transaction">
            <summary>Gets or sets the transaction.</summary>
            <value>The transaction.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.InternalTransaction">
            <summary>Gets or sets the internal transaction.</summary>
            <value>The internal transaction.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.TransactionIsolationLevel">
            <summary>Gets or sets the transaction isolation level.</summary>
            <value>The transaction isolation level.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.RetryCount">
            <summary>Gets or sets the number of retries.</summary>
            <value>The number of retries.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.RetryInterval">
            <summary>Gets or sets the retry interval.</summary>
            <value>The retry interval.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.UnsafeMode">
            <summary>Gets or sets a value indicating whether the unsafe mode is activated.</summary>
            <value>True if unsafe mode, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ValidateAllSourceMapped">
            <summary>
            Gets or sets a value indicating whether or not to validate all source members are mapped.
            </summary>
            <value>True if validate all source members are mapped, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation.ValidateAllDestinationMapped">
            <summary>
            Gets or sets a value indicating whether or not to validate all destination columns are mapped.
            </summary>
            <value>True if validate all destination columns are mapped, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.InternalOptions.UseBulkInsertToCopyTable">
            <summary>Internal Options. DO NOT USE IT.</summary>
        </member>
        <member name="P:Z.BulkOperations.InternalOptions.ToCopyTableName">
            <summary>Internal Options. DO NOT USE IT.</summary>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkDelete(System.Collections.Generic.List{`0})">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkDeleteAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk delete.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkInsert(System.Collections.Generic.List{`0})">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkInsertAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk insert.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkMerge(System.Collections.Generic.List{`0})">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkMergeAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk merge.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkSynchronize(System.Collections.Generic.List{`0})">
            <summary>Bulk synchronize.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkSynchronizeAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk synchronize.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkUpdate(System.Collections.Generic.List{`0})">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.BulkUpdateAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>Bulk update.</summary>
            <param name="datasource">The datasource.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.DeleteFromQuery(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>Deletes from IQueryable.</summary>
            <param name="originalQuery">The original query.</param>
            <param name="query">The query.</param>
            <returns>The number of row affected.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.DeleteFromQuery(System.Func{System.Linq.IQueryable{`0},System.Collections.Generic.IEnumerable{`0}})">
            <summary>Deletes from IQueryable.</summary>
            <param name="query">The query.</param>
            <returns>The number of row affected.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.DeleteFromQueryAsync(System.Linq.IQueryable,System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>Deletes from IQueryable.</summary>
            <param name="originalQuery">The original query.</param>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of row affected.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.DeleteFromQueryAsync(System.Func{System.Linq.IQueryable{`0},System.Collections.Generic.IEnumerable{`0}},System.Threading.CancellationToken)">
            <summary>Deletes from IQueryable.</summary>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of row affected.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.UpdateFromQuery(System.Linq.IQueryable,System.Linq.IQueryable,System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>Updates from query.</summary>
            <param name="originalQuery">The original query.</param>
            <param name="query">The query.</param>
            <param name="updateExpression">The update expression.</param>
            <returns>The number of row affected.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.UpdateFromQuery(System.Func{System.Linq.IQueryable{`0},System.Collections.Generic.IEnumerable{`0}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>Updates from query.</summary>
            <param name="query">The query.</param>
            <param name="updateExpression">The update expression.</param>
            <returns>The number of row affected.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.UpdateFromQueryAsync(System.Linq.IQueryable,System.Linq.IQueryable,System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>Updates from query asynchronous.</summary>
            <param name="originalQuery">The original query.</param>
            <param name="query">The query.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of row affected.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkOperation`1.UpdateFromQueryAsync(System.Func{System.Linq.IQueryable{`0},System.Collections.Generic.IEnumerable{`0}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>Updates from query asynchronous.</summary>
            <param name="query">The query.</param>
            <param name="updateExpression">The update expression.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of row affected.</returns>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.ColumnMappings">
            <summary>Gets or sets the column mappings.</summary>
            <value>The column mappings.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.ColumnInputExpression">
            <summary>Gets or sets the column input expression.</summary>
            <value>The column input expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.ColumnInputOutputExpression">
            <summary>Gets or sets the column input/output expression.</summary>
            <value>The column input/output expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.ColumnOutputExpression">
            <summary>Gets or sets the column output expression.</summary>
            <value>The column output expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.AutoMapKeyExpression">
            <summary>Gets or sets the automatic map key expression.</summary>
            <value>The automatic map key expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.AutoMapIdentityExpression">
            <summary>Gets or sets the automatic map identity expression.</summary>
            <value>The automatic map identity expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.ColumnPrimaryKeyExpression">
            <summary>Gets or sets the column primary key expression.</summary>
            <value>The column primary key expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.ColumnSynchronizeDeleteKeySubsetExpression">
            <summary>Gets or sets the column primary key expression.</summary>
            <value>The column primary key expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnInsertExpression">
            <summary>Gets or sets the ignore on insert expression.</summary>
            <value>The ignore on insert expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreColumnOutputExpression">
            <summary>Gets or sets columns output to ignore using an expression.</summary>
            <value>The columns output to ignore using an expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnUpdateExpression">
            <summary>Gets or sets the ignore on update expression.</summary>
            <value>The ignore on update expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnMergeInsertExpression">
            <summary>Gets or sets the ignore on merge insert expression.</summary>
            <value>The ignore on merge insert expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnMergeUpdateExpression">
            <summary>Gets or sets the ignore on merge update expression.</summary>
            <value>The ignore on merge update expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnSynchronizeInsertExpression">
            <summary>Gets or sets the ignore on synchronize insert expression.</summary>
            <value>The ignore on synchronize insert expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnSynchronizeUpdateExpression">
            <summary>Gets or sets the ignore on synchronize update expression.</summary>
            <value>The ignore on synchronize update expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.MergeMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when merge update is matched.</summary>
            <value>The `AND CONDITION` to add when merge update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.MergeMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when merge update is matched.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when merge update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.UpdateMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when update is matched.</summary>
            <value>The `AND CONDITION` to add when update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.UpdateMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when update is matched.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.DeleteMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when update is matched.</summary>
            <value>The `AND CONDITION` to add when update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.DeleteMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when update is matched.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.SynchronizeMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when merge update is matched.</summary>
            <value>The `AND CONDITION` to add when merge update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.SynchronizeMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when merge update is matched.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when merge update is matched.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnMergeMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND CONDITION` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnMergeMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnDeleteMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when delete is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND CONDITION` to add when delete is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnDeleteMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when delete is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when delete is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnUpdateMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND CONDITION` to add when update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnUpdateMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnSynchronizeMatchedAndConditionExpression">
            <summary>Gets or sets the `AND CONDITION` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND CONDITION` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.IgnoreOnSynchronizeMatchedAndOneNotConditionExpression">
            <summary>Gets or sets the `AND (ONE NOT MEET CONDITION)` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</summary>
            <value>The `AND (ONE NOT MEET CONDITION)` to add when merge update is matched. All columns are part of the condition except those from the ignore expression.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.CoalesceOnMergeUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
            <value>The columns to coalesce, ISNULL(StagingValue, DestinationValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.CoalesceDestinationOnMergeUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
            <value>The columns to coalesce, ISNULL(DestinationValue, StagingValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.CoalesceOnSynchronizeUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
            <value>The columns to coalesce, ISNULL(StagingValue, DestinationValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.CoalesceDestinationOnSynchronizeUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
            <value>The columns to coalesce, ISNULL(DestinationValue, StagingValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.CoalesceOnUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(StagingValue, DestinationValue).</summary>
            <value>The columns to coalesce, ISNULL(StagingValue, DestinationValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.CoalesceDestinationOnUpdateExpression">
            <summary>Gets or sets columns to coalesce, ISNULL(DestinationValue, StagingValue).</summary>
            <value>The columns to coalesce, ISNULL(DestinationValue, StagingValue).</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.OnMergeUpdateInputExpression">
            <summary>Gets or sets columns to input during the Merge Update statement.</summary>
            <value>The columns to input during the Merge Update statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.OnMergeInsertInputExpression">
            <summary>Gets or sets columns to input during the Merge Insert statement.</summary>
            <value>The columns to input during the Merge Insert statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.OnSynchronizeUpdateInputExpression">
            <summary>Gets or sets columns to input during the Synchronize Update statement.</summary>
            <value>The columns to input during the Synchronize Update statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.OnSynchronizeInsertInputExpression">
            <summary>Gets or sets columns to input during the Synchronize Insert statement.</summary>
            <value>The columns to input during the Synchronize Insert statement.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperation`1.ColumnStagingTableFormulaExpression">
            <summary>Gets or sets columns that should be added to be used in formula.</summary>
            <value>The columns that should be added to be used in formula.</value>
        </member>
        <member name="M:Z.BulkOperations.IBulkValueConverter.ConvertFromProvider(System.Type,System.Object)">
            <summary>Convert a value from the provider to the destination type.</summary>
            <param name="destinationType">Type of the destination.</param>
            <param name="value">The value.</param>
            <returns>the provider value converter to the destination type.</returns>
        </member>
        <member name="M:Z.BulkOperations.IBulkValueConverter.ConvertToProvider(System.Object)">
            <summary>Converts a value that will be used by the provider.</summary>
            <param name="value">The value.</param>
            <returns>The converter value that will be used by the provider.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkValueConverter`1.ConvertFromProvider(System.Object)">
            <summary>Convert a value from the provider to the destination type.</summary>
            <param name="destinationType">Type of the destination.</param>
            <param name="value">The value.</param>
            <returns>the provider value converter to the destination type.</returns>
        </member>
        <member name="M:Z.BulkOperations.BulkValueConverter`1.ConvertToProvider(`0)">
            <summary>Converts a value that will be used by the provider.</summary>
            <param name="value">The value.</param>
            <returns>The converter value that will be used by the provider.</returns>
        </member>
        <member name="T:Z.BulkOperations.DefaultValueResolutionType">
            <summary>Values that represent ColumnMappingFormulaType.</summary>
        </member>
        <member name="T:Z.BulkOperations.ColumnMapping">
            <summary>An advanced column mapping.</summary>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.CoalesceOnMergeUpdate">
            <summary>Gets or sets a value indicating whether the coalesce on merge update.</summary>
            <value>True if coalesce on merge update, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.CoalesceDestinationOnMergeUpdate">
            <summary>
            Gets or sets a value indicating whether the coalesce destination merge update.
            </summary>
            <value>True if coalesce destination merge update, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.IsOptional">
            <summary>Gets or sets a value indicating whether this object is optional.</summary>
            <value>True if this object is optional, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.AuditMode">
            <summary>Gets or sets the audit mode.</summary>
            <value>The audit mode.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.CaseSensitive">
            <summary>Gets or sets the case sensitive mode.</summary>
            <value>The case sensitive mode.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.IsConcurrencyColumn">
            <summary>Gets or sets a value indicating whether this object is concurrency column.</summary>
            <value>true if this object is concurrency column, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.DestinationAlias">
            <summary>Gets or sets destination alias.</summary>
            <value>The destination alias.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.DestinationExpression">
            <summary>Gets or sets destination expression.</summary>
            <value>The destination expression.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.DestinationName">
            <summary>Gets or sets the name of the destination.</summary>
            <value>The name of the destination.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.DestinationOrdinal">
            <summary>Gets or sets destination ordinal.</summary>
            <value>The destination ordinal.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.Direction">
            <summary>Gets or sets the direction.</summary>
            <value>The direction.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.FormulaInsert">
            <summary>Gets or sets the formula insert.</summary>
            <value>The formula insert.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.FormulaType">
            <summary>Gets or sets the type of the formula.</summary>
            <value>The type of the formula.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.FormulaUpdate">
            <summary>Gets or sets the formula update.</summary>
            <value>The formula update.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.FormulaPrimaryKeyDelete">
            <summary>Gets or sets the formula update.</summary>
            <value>The formula update.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.FormulaPrimaryKeyMerge">
            <summary>Gets or sets the formula update.</summary>
            <value>The formula update.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.FormulaPrimaryKeySynchronize">
            <summary>
                Gets or sets the formula primary key synchronize.
            </summary>
            <value>The formula primary key synchronize.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.FormulaPrimaryKeyUpdate">
            <summary>Gets or sets the formula update.</summary>
            <value>The formula update.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.IsIdentity">
            <summary>Gets or sets a value indicating whether this object is identity.</summary>
            <value>true if this object is identity, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.IsPrimaryKey">
            <summary>Gets or sets a value indicating whether this object is primary key.</summary>
            <value>true if this object is primary key, false if not.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.SourceName">
            <summary>Gets or sets the name of the source.</summary>
            <value>The name of the source.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.SourceOrdinal">
            <summary>Gets or sets source ordinal.</summary>
            <value>The source ordinal.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.SourceExpression">
            <summary>Gets or sets source expression.</summary>
            <value>The source expression.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.SourceValue">
            <summary>Gets or sets source value.</summary>
            <value>The source value.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.SourceValueFactory">
            <summary>Gets or sets source value factory.</summary>
            <value>The source value factory.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.DefaultValueResolution">
            <summary>Gets or sets the default value resolution.</summary>
            <value>The default value resolution.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.DefaultValue">
            <summary>Gets or sets the default value.</summary>
            <value>The default value.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping.DefaultValueSql">
            <summary>Gets or sets the default value SQL.</summary>
            <value>The default value SQL.</value>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor">
            <summary>Inherit constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.Int32,System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.Int32,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String,System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String,System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.Int32,System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.String,System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping.#ctor(System.Int32,System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="T:Z.BulkOperations.ErrorModeType">
            <summary>Values that represent error mode types.</summary>
        </member>
        <member name="F:Z.BulkOperations.ErrorModeType.ThrowException">
            <summary>An enum constant representing the throw exception option.</summary>
        </member>
        <member name="F:Z.BulkOperations.ErrorModeType.IgnoreAndContinue">
            <summary>An enum constant representing the ignore and continue option.</summary>
        </member>
        <member name="F:Z.BulkOperations.ErrorModeType.RetrySingleAndContinue">
            <summary>An enum constant representing the retry single and continue option.</summary>
        </member>
        <member name="T:Z.BulkOperations.BulkOperationError">
            <summary>A bulk operation error.</summary>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationError.Exception">
            <summary>Gets or sets the exception.</summary>
            <value>The exception.</value>
        </member>
        <member name="P:Z.BulkOperations.BulkOperationError.Record">
            <summary>Gets or sets the record.</summary>
            <value>The record.</value>
        </member>
        <member name="T:Z.BulkOperations.ColumnMappingAuditModeType">
            <summary>Values that represent ColumnMappingAuditModeType.</summary>
        </member>
        <member name="F:Z.BulkOperations.ColumnMappingAuditModeType.Inherit">
            <summary>An enum constant representing the inherit option.</summary>
        </member>
        <member name="F:Z.BulkOperations.ColumnMappingAuditModeType.Include">
            <summary>An enum constant representing the include option.</summary>
        </member>
        <member name="F:Z.BulkOperations.ColumnMappingAuditModeType.Exclude">
            <summary>An enum constant representing the exclude option.</summary>
        </member>
        <member name="T:Z.BulkOperations.ColumnMappingDirectionType">
            <summary>Values that represent ColumnMappingDirectionType.</summary>
        </member>
        <member name="T:Z.BulkOperations.ColumnMappingFormulaType">
            <summary>Values that represent ColumnMappingFormulaType.</summary>
        </member>
        <member name="T:Z.BulkOperations.ColumnMapping`1">
            <summary>An advanced column mapping.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor">
            <summary>Inherit constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Int32,System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Int32,System.String)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String,System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Int32,System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.String,System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Int32,System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key, false if not.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMapping`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>Constructor.</summary>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping`1.SourceExpression">
            <summary>Gets or sets source expression.</summary>
            <value>The source expression.</value>
        </member>
        <member name="P:Z.BulkOperations.ColumnMapping`1.DestinationExpression">
            <summary>Gets or sets destination expression.</summary>
            <value>The destination expression.</value>
        </member>
        <member name="M:Z.BulkOperations.CustomProvider.#ctor(Z.BulkOperations.ProviderType)">
            <summary>Constructor.</summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:Z.BulkOperations.CustomProvider.SetBindByName">
            <summary>Gets or sets the name of the set bind by.</summary>
            <value>The name of the set bind by.</value>
        </member>
        <member name="P:Z.BulkOperations.CustomProvider.ExecuteArray">
            <summary>Gets or sets an array of executes.</summary>
            <value>An Array of executes.</value>
        </member>
        <member name="P:Z.BulkOperations.CustomProvider.SetArrayBindCount">
            <summary>Gets or sets the number of set array binds.</summary>
            <value>The number of set array binds.</value>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String,System.String)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.Int32,System.Int32)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.Int32,System.String)">
            <summary>Constructor.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String,System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.Int32,System.Int32,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String,System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.Int32,System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.String,System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping},System.Int32,System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String,System.String)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Int32,System.Int32)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Int32,System.String)">
            <summary>Constructor.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String,System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Int32,System.Int32,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String,System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Int32,System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.String,System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Int32,System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnExpression">The column expression.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnExpression">The column expression.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnExpression">The column expression.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnExpression">The column expression.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Boolean)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.BasicColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String,System.String)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.Int32,System.Int32)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.Int32,System.String)">
            <summary>Constructor.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String,System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.Int32,System.Int32,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String,System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.Int32,System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.String,System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping},System.Int32,System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <param name="list">The list to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String,System.String)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Int32,System.Int32)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Int32,System.String)">
            <summary>Constructor.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String,System.Int32)">
            <summary>Constructor.</summary>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String,System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Int32,System.Int32,System.Boolean)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String,System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Int32,System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.String,System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Int32,System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceOrdinal">Source ordinal.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnExpression">The column expression.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnExpression">The column expression.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnExpression">The column expression.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="columnExpression">The column expression.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Boolean)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationOrdinal">Destination ordinal.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Z.BulkOperations.ColumnMappingExtensions.Add``1(System.Collections.Generic.List{Z.BulkOperations.ColumnMapping{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean,Z.BulkOperations.ColumnMappingDirectionType)">
            <summary>A List&lt;ColumnMapping&lt;T&gt;&gt; extension method that adds list.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The list to act on.</param>
            <param name="sourceExpression">Source expression.</param>
            <param name="destinationName">Name of the destination.</param>
            <param name="isPrimaryKey">true if this object is primary key.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="T:Z.BulkOperations.InternalTransactionType">
            <summary>Values that represent InternalTransactionType.</summary>
        </member>
        <member name="T:Z.BulkOperations.LicenseManager">
            <summary>Manager for licenses.</summary>
        </member>
        <member name="M:Z.BulkOperations.LicenseManager.ValidateLicense(Z.BulkOperations.ProviderType)">
            <summary>Validates the license.</summary>
            <param name="provider">The provider.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Z.BulkOperations.LicenseManager.ValidateLicense(System.String@,Z.BulkOperations.ProviderType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Validates the license.</summary>
            <param name="provider">The provider.</param>
            <param name="isEntityFramework">true if this object is entity framework.</param>
            <param name="isDapper">true if this object is dapper.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Z.BulkOperations.LicenseManager.IsTrialMode">
            <summary>Check if the trial mode is enabled.</summary>
            <returns>True if the trial mode is enabled.</returns>
        </member>
        <member name="M:Z.BulkOperations.LicenseManager.IsTrialExpired">
            <summary>Check if the trial period is expired or not (Doesn't mean the trial period is enabled).</summary>
            <returns>True if the trial period is expired or not (Doesn't mean the trial period is enabled).</returns>
        </member>
        <member name="M:Z.BulkOperations.LicenseManager.IsLicenseAdded">
            <summary>Check if at least one license as been added (Doesn't mean the license is valid).</summary>
            <returns>True if at least one license as been added (Doesn't mean the license is valid).</returns>
        </member>
        <member name="M:Z.BulkOperations.LicenseManager.AddLicense(System.String,System.String)">
            <summary>Adds a license key (Multiple license key can be added to activate different product or provider).</summary>
            <param name="licenseName">Name of the license.</param>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="T:Z.BulkOperations.ProviderType">
            <summary>Values that represent Provider.</summary>
        </member>
        <member name="T:Z.BulkOperations.ResolutionType">
            <summary>Values that represent ResolutionType.</summary>
        </member>
        <member name="T:Z.BulkOperations.ResultInfo">
            <summary>Represents the results from executing a bulk operation.</summary>
        </member>
        <member name="P:Z.BulkOperations.ResultInfo.RowsAffected">
            <summary>Gets or sets the number of rows that are affected by the bulk operation.</summary>
            <value>The number of rows that are affected by the bulk operation.</value>
        </member>
        <member name="P:Z.BulkOperations.ResultInfo.RowsAffectedInserted">
            <summary>Gets or sets the number of rows INSERTED by the bulk operations.</summary>
            <value>The number of rows INSERTED by the bulk operations.</value>
        </member>
        <member name="P:Z.BulkOperations.ResultInfo.RowsAffectedUpdated">
            <summary>Gets or sets the number of rows UPDATED by the bulk operations.</summary>
            <value>The number of rows UPDATED by the bulk operations.</value>
        </member>
        <member name="P:Z.BulkOperations.ResultInfo.RowsAffectedDeleted">
            <summary>Gets or sets the number of rows DELETED by the bulk operations.</summary>
            <value>The number of rows DELETED by the bulk operations.</value>
        </member>
        <member name="P:Z.BulkOperations.ResultInfo.Type">
            <summary>Gets or sets the type.</summary>
            <value>The type.</value>
        </member>
        <member name="P:Z.BulkOperations.ResultInfo.ResultByTableName">
            <summary>Gets or sets the result dictionary by table name.</summary>
            <value>The result dictionary by table name.</value>
        </member>
        <member name="M:System.Linq.ToExpandoListForBulkExtensions.ToExpandoListForBulk``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,``0}})">
            <summary>
            An IEnumerable&lt;Dictionary&lt;string,T&gt;&gt; extension method that converts the source to a List&lt;ExpandoObject&gt;
            </summary>
            <param name="source">The dictionary enumerable to act on.</param>
            <returns>A List&lt;ExpandoObject&gt;</returns>
            <code>
                var list = listDict.ToExpandoListForBulk();
                connection.BulkInsert(list);
            </code>
        </member>
    </members>
</doc>